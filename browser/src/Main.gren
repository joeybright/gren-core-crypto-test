module Main exposing (..)

import Browser
import Crypto
import Html
import Task


type Msg
    = NoOp
    | PrintUuid String


main : Program {} {} Msg
main =
    Browser.document
        { init =
            \_flags ->
                { model = {}
                , command =
                    Crypto.isSecureContext
                        |> Task.mapError (\_ -> Crypto.ModulusLengthNotDivisibleByEight)
                        |> Task.andThen (\secureContext ->
                            let
                                _ = Debug.log "secureContext" secureContext
                            in
                            Crypto.generateRsassaPkcs1V1_5Key 
                                secureContext
                                { modulusLength = 4096
                                , hash = Crypto.Sha256
                                , publicExponent = Crypto.PublicExponent65537
                                }
                                Crypto.CanBeExtracted
                        )
                        |> Task.attempt
                            (\res ->
                                case res of
                                    Ok val ->
                                        let
                                            _ =
                                                Debug.log "res" val
                                        in
                                        NoOp

                                    Err _err ->
                                        NoOp
                            )
                }
        , view =
            \model ->
                { title = "hi"
                , body =
                    [ Html.div
                        []
                        [ Html.text "hi"
                        ]
                    ]
                }
        , update =
            \msg model ->
                case msg of
                    NoOp ->
                        { model = {}
                        , command = Cmd.none
                        }

                    PrintUuid id ->
                        let
                            _ = Debug.log "randomuuid from gren" id
                        in
                        { model = {}
                        , command = Cmd.none
                        }
        , subscriptions = \model -> Sub.none
        }
