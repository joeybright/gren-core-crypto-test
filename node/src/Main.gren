module Main exposing (..)

{-| Tests for the `Crypto` module of the `gren-lang/core` package.
-}

import Bytes exposing ( Bytes )
import Bytes.Decode
import Bytes.Encode
import Crypto
import Init
import Json.Decode
import Json.Encode
import Node
import Process
import Stream
import Task exposing ( Task )
import Tests
import Time


{-|-}
type Msg
    = NoOp
    | StdoutMsg String


{-|-}
type alias Model =
    { stdout : Stream.Stream
    }


{-|-}
init env =
    Node.startProgram
        { model =
            { stdout = env.stdout
            }
        , command = Cmd.batch (Tests.tests StdoutMsg)
        }


{-|-}
main =
    Node.defineProgram
        { init = init
        , update =
            \msg model ->
                case msg of
                    StdoutMsg string ->
                        { model = model
                        , command = Task.perform (\_ -> NoOp) (Stream.sendLine model.stdout string)
                        }

                    NoOp ->
                        { model = model
                        , command = Cmd.none
                        }
        , subscriptions = \model -> Sub.none
        }
