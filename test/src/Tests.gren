module Tests exposing (..)

{-|-}

import Bytes.Encode
import Crypto
import Json.Encode
import Task exposing ( Task )


{-|-}
count : Int
count =
    tests (\_ -> {})
        |> Array.length


{-| All of the tests in this module.
-}
tests : (String -> msg) -> Array (Cmd msg)
tests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "Secure context - " ++ String.fromInt int
    in
    [ expectSuccess test (testId 1) getSecureContext
    ]
        ++ rsaTests func
        ++ randomValueTests func
        ++ uuidTests func
        ++ hmacKeyTests func
        ++ aesKeyTests func
        ++ ecKeyTests func



-- Secure context


{-|-}
getSecureContext : Task {} Crypto.SecureContext
getSecureContext =
    Crypto.isSecureContext



-- Random values


randomValueTests : (String -> msg) -> Array (Cmd msg)
randomValueTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "Random value tests - " ++ String.fromInt int

        maxInt8Values =
            65536

        maxInt16Values =
            32768

        maxInt32Values =
            16384

        testGeneratedValueCount num success failure res =
            if Array.length res == num then
                func success
            else
                func failure
    in
    [ expectSuccess test (testId 1) (Crypto.getRandomInt8Values 3)
    , expectSuccess test (testId 2) (Crypto.getRandomInt8Values 99999)
    , expectSuccess test (testId 3) (Crypto.getRandomInt8Values -99999)
    , expectSuccess test (testId 4) (Crypto.getRandomUInt8Values 3)
    , expectSuccess test (testId 5) (Crypto.getRandomUInt8Values 99999)
    , expectSuccess test (testId 6) (Crypto.getRandomUInt8Values -99999)
    , expectSuccess test (testId 7) (Crypto.getRandomInt16Values 3)
    , expectSuccess test (testId 8) (Crypto.getRandomInt16Values 99999)
    , expectSuccess test (testId 9) (Crypto.getRandomInt16Values -99999)
    , expectSuccess test (testId 10) (Crypto.getRandomUInt16Values 3)
    , expectSuccess test (testId 11) (Crypto.getRandomUInt16Values 99999)
    , expectSuccess test (testId 12) (Crypto.getRandomUInt16Values -99999)
    , expectSuccess test (testId 13) (Crypto.getRandomInt32Values 3)
    , expectSuccess test (testId 14) (Crypto.getRandomInt32Values 99999)
    , expectSuccess test (testId 15) (Crypto.getRandomInt32Values -99999)
    , expectSuccess test (testId 16) (Crypto.getRandomUInt32Values 3)
    , expectSuccess test (testId 17) (Crypto.getRandomUInt32Values 99999)
    , expectSuccess test (testId 18) (Crypto.getRandomUInt32Values -99999)
    ]



-- UUID generation


uuidTests : (String -> msg) -> Array (Cmd msg)
uuidTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "Uuid  - " ++ String.fromInt int

        generateRandomUuid =
            getSecureContext
                |> Task.andThen (\secureContext -> Crypto.randomUuid secureContext)
    in
    [ expectSuccess test (testId 1) generateRandomUuid
    ]



-- RSA KEY TESTS


{-|-}
rsaTests : (String -> msg) -> Array (Cmd msg)
rsaTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "RSA key - " ++ String.fromInt int

        generate =
            [ expectSuccess test (testId 1) (generateRsaOaepKeyPair Crypto.Sha256 Crypto.PublicExponent65537)
            , expectSuccess test (testId 2) (generateRsaOaepKeyPair Crypto.Sha256 Crypto.PublicExponent3)
            , expectSuccess test (testId 3) (generateRsaOaepKeyPair Crypto.Sha384 Crypto.PublicExponent65537)
            , expectSuccess test (testId 4) (generateRsaOaepKeyPair Crypto.Sha384 Crypto.PublicExponent3)
            , expectSuccess test (testId 5) (generateRsaOaepKeyPair Crypto.Sha512 Crypto.PublicExponent65537)
            , expectSuccess test (testId 6) (generateRsaOaepKeyPair Crypto.Sha512 Crypto.PublicExponent3)
            ]
    in
    generate ++ rsaOaepPublicKeyTests func ++ rsaOaepPrivateKeyTests func ++ rsaPssPublicKeyTests func ++ rsaPssPrivateKeyTests func ++ rsaSsaPkcs1V1_5KPublicKeyTests func ++ rsaSsaPkcs1V1_5KPrivateKeyTests func


{-|-}
rsaOaepPublicKeyTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "RSA-OAEP public key - " ++ String.fromInt int

        exportAsJwk =
            exportRsaKeyTests "RSA-OAEP public key export jwk - " exportRsaOaepPublicKeyAsJwk func

        exportAsSpki =
            exportRsaKeyTests "RSA-OAEP public key export spki - " exportRsaOaepPublicKeyAsSpki func

        importFromJwk =
            importRsaKeyTests "RSA-OAEP public key import jwk - " importRsaOaepPublicKeyFromJwk func

        importFromSpki =
            importRsaKeyTests "RSA-OAEP public key import spki - " importRsaOaepPublicKeyFromSpki func

        importFromSpkiFailures =
            [ expectFailure test (testId 31) (importRsaOaepPublicKeyFromSpkiWithArbitraryBytes Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha256 (Bytes.Encode.encode (Bytes.Encode.string "hello")))
            ]
    in
    exportAsJwk ++ importFromJwk ++ exportAsSpki ++ importFromSpki ++ importFromSpkiFailures


{-|-}
rsaOaepPrivateKeyTests func =
    let
        exportAsJwk =
            exportRsaKeyTests "RSA-OAEP private key export jwk - " exportRsaOaepPrivateKeyAsJwk func

        exportAsPkcs8 =
            exportRsaKeyTests "RSA-OAEP private key export pkcs8 - " exportRsaOaepPrivateKeyAsPkcs8 func

        importFromJwk =
            importRsaKeyTests "RSA-OAEP private key import jwk - " importRsaOaepPrivateKeyFromJwk func

        importFromPkcs8 =
            importRsaKeyTests "RSA-OAEP public key import pkcs8 - " importRsaOaepPrivateKeyFromPkcs8 func
    in
    exportAsJwk ++ exportAsPkcs8 ++ importFromJwk ++ importFromPkcs8


{-|-}
rsaPssPublicKeyTests func =
    let
        exportAsJwk =
            exportRsaKeyTests "RSA-PSS public key export jwk - " exportRsaPssPublicKeyAsJwk func

        exportAsSpki =
            exportRsaKeyTests "RSA-PSS public key export spki - " exportRsaPssPublicKeyAsSpki func

        importAsJwk =
            importRsaKeyTests "RSA-PSS public key import jwk - " importRsaPssPublicKeyFromJwk func

        importAsSpki =
            importRsaKeyTests "RSA-PSS public key import spki - " importRsaPssPublicKeyFromSpki func
    in
    exportAsJwk ++ importAsJwk ++ exportAsSpki ++ importAsSpki


{-|-}
rsaPssPrivateKeyTests func =
    let
        exportAsJwk =
            exportRsaKeyTests "RSA-PSS private key export jwk - " exportRsaPssPrivateKeyAsJwk func

        exportAsPkcs8 =
            exportRsaKeyTests "RSA-PSS private key export pkcs8 - " exportRsaPssPrivateKeyAsPkcs8 func

        importFromJwk =
            importRsaKeyTests "RSA-PSS private key import jwk - " importRsaPssPrivateKeyFromJwk func

        importFromPkcs8 =
            importRsaKeyTests "RSA-PSS private key import pkcs8 - " importRsaPssPrivateKeyFromPkcs8 func
    in
    exportAsJwk ++ exportAsPkcs8 ++ importFromJwk ++ importFromPkcs8


{-|-}
rsaSsaPkcs1V1_5KPublicKeyTests func =
    let
        exportAsJwk =
            exportRsaKeyTests "RSASSA-PKCS1-v1_5 public key export jwk - " exportRsaSsaPkcs1V1_5PublicKeyAsJwk func

        exportAsSpki =
            exportRsaKeyTests "RSASSA-PKCS1-v1_5 public key export spki - " exportRsaSsaPkcs1V1_5PublicKeyAsSpki func

        importAsJwk =
            importRsaKeyTests "RSASSA-PKCS1-v1_5 public key import jwk - " importRsaSsaPkcs1V1_5PublicKeyFromJwk func

        importAsSpki =
            importRsaKeyTests "RSASSA-PKCS1-v1_5 public key import spki - " importRsaSsaPkcs1V1_5PublicKeyFromSpki func
    in
    exportAsJwk ++ importAsJwk ++ exportAsSpki ++ importAsSpki


{-|-}
rsaSsaPkcs1V1_5KPrivateKeyTests func =
    let
        exportAsJwk =
            exportRsaKeyTests "RSASSA-PKCS1-v1_5 public key export jwk - " exportRsaSsaPkcs1V1_5PrivateKeyAsJwk func

        exportAsSpki =
            exportRsaKeyTests "RSASSA-PKCS1-v1_5 public key export spki - " exportRsaSsaPkcs1V1_5PrivateKeyAsPkcs8 func

        importAsJwk =
            importRsaKeyTests "RSASSA-PKCS1-v1_5 public key import jwk - " importRsaSsaPkcs1V1_5PrivateKeyFromJwk func

        importAsSpki =
            importRsaKeyTests "RSASSA-PKCS1-v1_5 public key import spki - " importRsaSsaPkcs1V1_5PrivateKeyFromPkcs8 func
    in
    exportAsJwk ++ importAsJwk ++ exportAsSpki ++ importAsSpki


{-|-}
exportRsaKeyTests string jwkFunc func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            string ++ String.fromInt int
    in
    [ expectSuccess test (testId 1) (jwkFunc Crypto.Sha256 Crypto.PublicExponent3)
    , expectSuccess test (testId 2) (jwkFunc Crypto.Sha384 Crypto.PublicExponent3)
    , expectSuccess test (testId 3) (jwkFunc Crypto.Sha512 Crypto.PublicExponent3)
    , expectSuccess test (testId 4) (jwkFunc Crypto.Sha256 Crypto.PublicExponent65537)
    , expectSuccess test (testId 5) (jwkFunc Crypto.Sha384 Crypto.PublicExponent65537)
    , expectSuccess test (testId 6) (jwkFunc Crypto.Sha512 Crypto.PublicExponent65537)
    ]


{-|-}
importRsaKeyTests string jwkFunc func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            string ++ String.fromInt int
    in
    [ expectSuccess test (testId 1) (jwkFunc Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha256)
    , expectSuccess test (testId 2) (jwkFunc Crypto.Sha384 Crypto.PublicExponent3 Crypto.Sha384)
    , expectSuccess test (testId 3) (jwkFunc Crypto.Sha512 Crypto.PublicExponent3 Crypto.Sha512)
    , expectSuccess test (testId 4) (jwkFunc Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha256)
    , expectSuccess test (testId 5) (jwkFunc Crypto.Sha384 Crypto.PublicExponent65537 Crypto.Sha384)
    , expectSuccess test (testId 6) (jwkFunc Crypto.Sha512 Crypto.PublicExponent65537 Crypto.Sha512)
    ]



-- AES KEY TESTS


-- importAesCtrKeyFromJwk
-- importAesCtrKeyFromRaw
-- importAesCbcKeyFromJwk
-- importAesCbcKeyFromRaw
-- importAesGcmKeyFromJwk
-- importAesGcmKeyFromRaw


{-|-}
exportAesKeyTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "AES export key tests - " ++ String.fromInt int
    in
    [ expectSuccess test (testId 1) (exportAesCtrKeyAsJwk Crypto.AesLength128)
    , expectSuccess test (testId 3) (exportAesCtrKeyAsJwk Crypto.AesLength256)
    , expectSuccess test (testId 4) (exportAesCtrKeyAsRaw Crypto.AesLength128)
    , expectSuccess test (testId 6) (exportAesCtrKeyAsRaw Crypto.AesLength256)
    , expectSuccess test (testId 7) (exportAesCbcKeyAsJwk Crypto.AesLength128)
    , expectSuccess test (testId 9) (exportAesCbcKeyAsJwk Crypto.AesLength256)
    , expectSuccess test (testId 10) (exportAesCbcKeyAsRaw Crypto.AesLength128)
    , expectSuccess test (testId 12) (exportAesCbcKeyAsRaw Crypto.AesLength256)
    , expectSuccess test (testId 13) (exportAesGcmKeyAsJwk Crypto.AesLength128)
    , expectSuccess test (testId 15) (exportAesGcmKeyAsJwk Crypto.AesLength256)
    , expectSuccess test (testId 16) (exportAesGcmKeyAsRaw Crypto.AesLength128)
    , expectSuccess test (testId 18) (exportAesGcmKeyAsRaw Crypto.AesLength256)
    ]


{-|-}
importAesKeyTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "AES import key tests - " ++ String.fromInt int
    in
    [ expectSuccess test (testId 1) (importAesCtrKeyFromJwk Crypto.AesLength128)
    , expectSuccess test (testId 3) (importAesCtrKeyFromJwk Crypto.AesLength256)
    , expectSuccess test (testId 4) (importAesCtrKeyFromRaw Crypto.AesLength128)
    , expectSuccess test (testId 6) (importAesCtrKeyFromRaw Crypto.AesLength256)
    , expectSuccess test (testId 7) (importAesCbcKeyFromJwk Crypto.AesLength128)
    , expectSuccess test (testId 9) (importAesCbcKeyFromJwk Crypto.AesLength256)
    , expectSuccess test (testId 10) (importAesCbcKeyFromRaw Crypto.AesLength128)
    , expectSuccess test (testId 12) (importAesCbcKeyFromRaw Crypto.AesLength256)
    , expectSuccess test (testId 13) (importAesGcmKeyFromJwk Crypto.AesLength128)
    , expectSuccess test (testId 15) (importAesGcmKeyFromJwk Crypto.AesLength256)
    , expectSuccess test (testId 16) (importAesGcmKeyFromRaw Crypto.AesLength128)
    , expectSuccess test (testId 18) (importAesGcmKeyFromRaw Crypto.AesLength256)
    ]


{-|-}
aesKeyTests func =
    exportAesKeyTests func ++ importAesKeyTests func



-- EC KEY TESTS


{-|-}
ecKeyTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "EC key tests - " ++ String.fromInt int
    in
    [ expectSuccess test (testId 1) (exportEcdhPublicKeyAsJwk Crypto.P256)
    , expectSuccess test (testId 2) (exportEcdhPublicKeyAsJwk Crypto.P384)
    , expectSuccess test (testId 3) (exportEcdhPublicKeyAsJwk Crypto.P521)
    , expectSuccess test (testId 4) (exportEcdhPublicKeyAsRaw Crypto.P256)
    , expectSuccess test (testId 5) (exportEcdhPublicKeyAsRaw Crypto.P384)
    , expectSuccess test (testId 6) (exportEcdhPublicKeyAsRaw Crypto.P521)
    , expectSuccess test (testId 7) (exportEcdhPublicKeyAsSpki Crypto.P256)
    , expectSuccess test (testId 8) (exportEcdhPublicKeyAsSpki Crypto.P384)
    , expectSuccess test (testId 9) (exportEcdhPublicKeyAsSpki Crypto.P521)
        -- 
    , expectSuccess test (testId 1) (exportEcdsaPublicKeyAsJwk Crypto.P256)
    , expectSuccess test (testId 2) (exportEcdsaPublicKeyAsJwk Crypto.P384)
    , expectSuccess test (testId 3) (exportEcdsaPublicKeyAsJwk Crypto.P521)
    , expectSuccess test (testId 4) (exportEcdsaPublicKeyAsRaw Crypto.P256)
    , expectSuccess test (testId 5) (exportEcdsaPublicKeyAsRaw Crypto.P384)
    , expectSuccess test (testId 6) (exportEcdsaPublicKeyAsRaw Crypto.P521)
    , expectSuccess test (testId 7) (exportEcdsaPublicKeyAsSpki Crypto.P256)
    , expectSuccess test (testId 8) (exportEcdsaPublicKeyAsSpki Crypto.P384)
    , expectSuccess test (testId 9) (exportEcdsaPublicKeyAsSpki Crypto.P521)
        -- 
    , expectSuccess test (testId 10) (exportEcdhPrivateKeyAsJwk Crypto.P256)
    , expectSuccess test (testId 11) (exportEcdhPrivateKeyAsJwk Crypto.P384)
    , expectSuccess test (testId 12) (exportEcdhPrivateKeyAsJwk Crypto.P521)
    , expectSuccess test (testId 13) (exportEcdhPrivateKeyAsPkcs8 Crypto.P256)
    , expectSuccess test (testId 14) (exportEcdhPrivateKeyAsPkcs8 Crypto.P384)
    , expectSuccess test (testId 15) (exportEcdhPrivateKeyAsPkcs8 Crypto.P521)
        -- 
    , expectSuccess test (testId 16) (exportEcdsaPrivateKeyAsJwk Crypto.P256)
    , expectSuccess test (testId 17) (exportEcdsaPrivateKeyAsJwk Crypto.P384)
    , expectSuccess test (testId 18) (exportEcdsaPrivateKeyAsJwk Crypto.P521)
    , expectSuccess test (testId 19) (exportEcdsaPrivateKeyAsPkcs8 Crypto.P256)
    , expectSuccess test (testId 20) (exportEcdsaPrivateKeyAsPkcs8 Crypto.P384)
    , expectSuccess test (testId 21) (exportEcdsaPrivateKeyAsPkcs8 Crypto.P521)
    ]



-- HMAC KEY TESTS


{-| Importing HMAC keys from JWK tests
-}
hmacImportKeyFromJwkTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "HMAC import key from JWK test - " ++ String.fromInt int
    in
    [ expectSuccess test (testId 1) (importHmacKeyFromJwk Crypto.Sha256 Nothing Crypto.Sha256 Nothing)
    , expectFailure test (testId 2) (importHmacKeyFromJwk Crypto.Sha256 Nothing Crypto.Sha384 Nothing)
    , expectFailure test (testId 3) (importHmacKeyFromJwk Crypto.Sha256 Nothing Crypto.Sha512 Nothing)
    , expectFailure test (testId 4) (importHmacKeyFromJwk Crypto.Sha384 Nothing Crypto.Sha256 Nothing)
    , expectSuccess test (testId 5) (importHmacKeyFromJwk Crypto.Sha384 Nothing Crypto.Sha384 Nothing)
    , expectFailure test (testId 6) (importHmacKeyFromJwk Crypto.Sha384 Nothing Crypto.Sha512 Nothing)
    , expectFailure test (testId 7) (importHmacKeyFromJwk Crypto.Sha512 Nothing Crypto.Sha256 Nothing)
    , expectFailure test (testId 8) (importHmacKeyFromJwk Crypto.Sha512 Nothing Crypto.Sha384 Nothing)
    , expectSuccess test (testId 9) (importHmacKeyFromJwk Crypto.Sha512 Nothing Crypto.Sha512 Nothing)
    ]


{-| Importing HMAC keys from raw tests
-}
hmacImportKeyFromRawTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "HMAC import key from raw test - " ++ String.fromInt int
    in
    [ expectSuccess test (testId 1) (importHmacKeyFromRaw Crypto.Sha256 Nothing Crypto.Sha256 Nothing)
    , expectSuccess test (testId 2) (importHmacKeyFromRaw Crypto.Sha256 Nothing Crypto.Sha384 Nothing)
    , expectSuccess test (testId 3) (importHmacKeyFromRaw Crypto.Sha256 Nothing Crypto.Sha512 Nothing)
    , expectSuccess test (testId 4) (importHmacKeyFromRaw Crypto.Sha384 Nothing Crypto.Sha256 Nothing)
    , expectSuccess test (testId 5) (importHmacKeyFromRaw Crypto.Sha384 Nothing Crypto.Sha384 Nothing)
    , expectSuccess test (testId 6) (importHmacKeyFromRaw Crypto.Sha384 Nothing Crypto.Sha512 Nothing)
    , expectSuccess test (testId 7) (importHmacKeyFromRaw Crypto.Sha512 Nothing Crypto.Sha256 Nothing)
    , expectSuccess test (testId 8) (importHmacKeyFromRaw Crypto.Sha512 Nothing Crypto.Sha384 Nothing)
    , expectSuccess test (testId 9) (importHmacKeyFromRaw Crypto.Sha512 Nothing Crypto.Sha512 Nothing)
    ]


{-| Tests for importing HMAC keys.

Note that these tests do _not_ test for importing keys with different lengths. This is
because of inconsistencies between results on `browser` and `node` platforms. The docs
in `gren-core` mention this.
-}
hmacImportKeyTests func =
    hmacImportKeyFromRawTests func ++ hmacImportKeyFromJwkTests func


{-|-}
hmacExportKeyTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "HMAC export key tests - " ++ String.fromInt int
    in
    [ expectSuccess test (testId 1) (exportHmacKeyAsJwk Crypto.Sha256 Nothing)
    , expectSuccess test (testId 2) (exportHmacKeyAsJwk Crypto.Sha384 Nothing)
    , expectSuccess test (testId 3) (exportHmacKeyAsJwk Crypto.Sha512 Nothing)
        -- Exactly 8, which is the minimum value and should succeed
    , expectSuccess test (testId 4) (exportHmacKeyAsJwk Crypto.Sha256 (Just 8))
    , expectSuccess test (testId 5) (exportHmacKeyAsJwk Crypto.Sha384 (Just 8))
    , expectSuccess test (testId 6) (exportHmacKeyAsJwk Crypto.Sha512 (Just 8))
        -- Less than 8, but clamped to at least 8 (which results in success)
    , expectSuccess test (testId 7) (exportHmacKeyAsJwk Crypto.Sha256 (Just 1))
    , expectSuccess test (testId 8) (exportHmacKeyAsJwk Crypto.Sha384 (Just 1))
    , expectSuccess test (testId 9) (exportHmacKeyAsJwk Crypto.Sha512 (Just 1))
        -- A number not divible by 8
    , expectFailure test (testId 10) (exportHmacKeyAsJwk Crypto.Sha256 (Just 14))
    , expectFailure test (testId 11) (exportHmacKeyAsJwk Crypto.Sha384 (Just 14))
    , expectFailure test (testId 12) (exportHmacKeyAsJwk Crypto.Sha512 (Just 14))
        -- Max integer value that can be passed for the `length`, but is still divisible by 8
    , expectSuccess test (testId 13) (exportHmacKeyAsJwk Crypto.Sha256 (Just 2048))
    , expectSuccess test (testId 14) (exportHmacKeyAsJwk Crypto.Sha384 (Just 2048))
    , expectSuccess test (testId 15) (exportHmacKeyAsJwk Crypto.Sha512 (Just 2048))
        -- Greater than the max integer value, should still succeed with clamped value
    , expectSuccess test (testId 16) (exportHmacKeyAsJwk Crypto.Sha256 (Just 41313431134))
    , expectSuccess test (testId 17) (exportHmacKeyAsJwk Crypto.Sha384 (Just 41313431134))
    , expectSuccess test (testId 18) (exportHmacKeyAsJwk Crypto.Sha512 (Just 41313431134))
    ]


{-| All HMAC key tests
-}
hmacKeyTests func =
    hmacExportKeyTests func ++ hmacImportKeyTests func



-- GENERATE KEYS


{-|-}
generateRsaOaepKeyPair hash exponent =
    generateKey
        Crypto.ModulusLengthNotDivisibleByEight
        (\secureContext ->
            Crypto.generateRsaOaepKeyPair
                secureContext
                { modulusLength = 4096
                , hash = hash
                , publicExponent = Crypto.PublicExponent65537
                }
                Crypto.CanBeExtracted
        )


{-|-}
generateRsaPssKeyPair hash exponent =
    generateKey
        Crypto.ModulusLengthNotDivisibleByEight
        (\secureContext ->
            Crypto.generateRsaPssKeyPair
                secureContext
                { modulusLength = 4096
                , hash = hash
                , publicExponent = Crypto.PublicExponent65537
                }
                Crypto.CanBeExtracted
        )


{-|-}
generateRsaSsaPkcs1V1_5KeyPair hash exponent =
    generateKey
        Crypto.ModulusLengthNotDivisibleByEight
        (\secureContext ->
            Crypto.generateRsaSsaPkcs1V1_5KeyPair
                secureContext
                { modulusLength = 4096
                , hash = hash
                , publicExponent = Crypto.PublicExponent65537
                }
                Crypto.CanBeExtracted
        )


{-|-}
generateAesCtrKey aesLength =
    generateKey {} (\secureContext -> Crypto.generateAesCtrKey secureContext aesLength Crypto.CanBeExtracted)


{-|-}
generateAesCbcKey aesLength =
    generateKey {} (\secureContext -> Crypto.generateAesCbcKey secureContext aesLength Crypto.CanBeExtracted)


{-|-}
generateAesGcmKey aesLength =
    generateKey {} (\secureContext -> Crypto.generateAesGcmKey secureContext aesLength Crypto.CanBeExtracted)


{-|-}
generateEcdsaKeyPair curve =
    generateKey {} (\secureContext -> Crypto.generateEcdsaKeyPair secureContext curve Crypto.CanBeExtracted)


{-|-}
generateEcdhKeyPair curve =
    generateKey {} (\secureContext -> Crypto.generateEcdhKeyPair secureContext curve Crypto.CanBeExtracted)


{-|-}
generateHmacKey hash length =
    generateKey
        Crypto.LengthNotDivisibleByEight
        (\secureContext ->
            Crypto.generateHmacKey
                secureContext
                { hash = hash
                , length = length
                }
                Crypto.CanBeExtracted
        )


{-|-}
generateKey errorMap keyGenFunc =
    getSecureContext
        |> Task.mapError (\_ -> errorMap)
        |> Task.andThen
                (\secureContext ->
                    keyGenFunc secureContext
                        |> Task.map
                                (\key ->
                                    { key = key
                                    , secureContext = secureContext
                                    }
                                )
                )



-- EXPORT RSA KEYS


{-|-}
exportRsaOaepPublicKeyAsJwk hash exponent =
    exportRsaOaepKeyPair hash exponent Crypto.exportRsaOaepPublicKeyAsJwk .publicKey


{-|-}
exportRsaOaepPublicKeyAsSpki hash exponent =
    exportRsaOaepKeyPair hash exponent Crypto.exportRsaOaepPublicKeyAsSpki .publicKey


{-|-}
exportRsaOaepPrivateKeyAsJwk hash exponent =
    exportRsaOaepKeyPair hash exponent Crypto.exportRsaOaepPrivateKeyAsJwk .privateKey


{-|-}
exportRsaOaepPrivateKeyAsPkcs8 hash exponent =
    exportRsaOaepKeyPair hash exponent Crypto.exportRsaOaepPrivateKeyAsPkcs8 .privateKey


{-|-}
exportRsaPssPublicKeyAsJwk hash exponent =
    exportRsaPssKeyPair hash exponent Crypto.exportRsaPssPublicKeyAsJwk .publicKey


{-|-}
exportRsaPssPublicKeyAsSpki hash exponent =
    exportRsaPssKeyPair hash exponent Crypto.exportRsaPssPublicKeyAsSpki .publicKey


{-|-}
exportRsaPssPrivateKeyAsJwk hash exponent =
    exportRsaPssKeyPair hash exponent Crypto.exportRsaPssPrivateKeyAsJwk .privateKey


{-|-}
exportRsaPssPrivateKeyAsPkcs8 hash exponent =
    exportRsaPssKeyPair hash exponent Crypto.exportRsaPssPrivateKeyAsPkcs8 .privateKey


{-|-}
exportRsaSsaPkcs1V1_5PublicKeyAsJwk hash exponent =
    exportRsaSsaPkcs1V1_5KeyPair hash exponent Crypto.exportRsaSsaPkcs1V1_5PublicKeyAsJwk .publicKey


{-|-}
exportRsaSsaPkcs1V1_5PublicKeyAsSpki hash exponent =
    exportRsaSsaPkcs1V1_5KeyPair hash exponent Crypto.exportRsaSsaPkcs1V1_5PublicKeyAsSpki .publicKey


{-|-}
exportRsaSsaPkcs1V1_5PrivateKeyAsJwk hash exponent =
    exportRsaSsaPkcs1V1_5KeyPair hash exponent Crypto.exportRsaSsaPkcs1V1_5PrivateKeyAsJwk .privateKey


{-|-}
exportRsaSsaPkcs1V1_5PrivateKeyAsPkcs8 hash exponent =
    exportRsaSsaPkcs1V1_5KeyPair hash exponent Crypto.exportRsaSsaPkcs1V1_5PrivateKeyAsPkcs8 .privateKey


{-|-}
exportRsaOaepKeyPair hash exponent =
    exportKey (generateRsaOaepKeyPair hash exponent)


{-|-}
exportRsaPssKeyPair hash exponent =
    exportKey (generateRsaPssKeyPair hash exponent)


{-|-}
exportRsaSsaPkcs1V1_5KeyPair hash exponent =
    exportKey (generateRsaSsaPkcs1V1_5KeyPair hash exponent)



-- EXPORT EC KEYS


{-|-}
exportEcdsaPrivateKeyAsJwk curve =
    exportEcdsaKeyPair curve Crypto.exportEcdsaPrivateKeyAsJwk .privateKey


{-|-}
exportEcdsaPrivateKeyAsPkcs8 curve =
    exportEcdsaKeyPair curve Crypto.exportEcdsaPrivateKeyAsPkcs8 .privateKey


{-|-}
exportEcdsaPublicKeyAsJwk curve =
    exportEcdsaKeyPair curve Crypto.exportEcdsaPublicKeyAsJwk .publicKey


{-|-}
exportEcdsaPublicKeyAsSpki curve =
    exportEcdsaKeyPair curve Crypto.exportEcdsaPublicKeyAsSpki .publicKey


{-|-}
exportEcdsaPublicKeyAsRaw curve =
    exportEcdsaKeyPair curve Crypto.exportEcdsaPublicKeyAsRaw .publicKey


{-|-}
exportEcdhPrivateKeyAsJwk curve =
    exportEcdhKeyPair curve Crypto.exportEcdhPrivateKeyAsJwk .privateKey


{-|-}
exportEcdhPrivateKeyAsPkcs8 curve =
    exportEcdhKeyPair curve Crypto.exportEcdhPrivateKeyAsPkcs8 .privateKey


{-|-}
exportEcdhPublicKeyAsJwk curve =
    exportEcdhKeyPair curve Crypto.exportEcdhPublicKeyAsJwk .publicKey


{-|-}
exportEcdhPublicKeyAsSpki curve =
    exportEcdhKeyPair curve Crypto.exportEcdhPublicKeyAsSpki .publicKey


{-|-}
exportEcdhPublicKeyAsRaw curve =
    exportEcdhKeyPair curve Crypto.exportEcdhPublicKeyAsJwk .publicKey


{-|-}
exportEcdhKeyPair curve =
    exportKey (generateEcdhKeyPair curve)


{-|-}
exportEcdsaKeyPair curve =
    exportKey (generateEcdsaKeyPair curve)



-- EXPORT HMAC KEYS


{-|-}
exportHmacKeyAsJwk hash length =
    exportHmacKey hash length Crypto.exportHmacKeyAsJwk identity


{-|-}
exportHmacKeyAsRaw hash length =
    exportHmacKey hash length Crypto.exportHmacKeyAsRaw identity


{-|-}
exportHmacKey hash length =
    exportKey (generateHmacKey hash length)



-- EXPORT AES KEYS


{-|-}
exportAesCtrKeyAsJwk aesLength =
    exportAesCtrKey aesLength Crypto.exportAesCtrKeyAsJwk identity


{-|-}
exportAesCtrKeyAsRaw aesLength =
    exportAesCtrKey aesLength Crypto.exportAesCtrKeyAsRaw identity


{-|-}
exportAesCbcKeyAsJwk aesLength =
    exportAesCbcKey aesLength Crypto.exportAesCbcKeyAsJwk identity


{-|-}
exportAesCbcKeyAsRaw aesLength =
    exportAesCbcKey aesLength Crypto.exportAesCbcKeyAsRaw identity


{-|-}
exportAesGcmKeyAsRaw aesLength =
    exportAesGcmKey aesLength Crypto.exportAesGcmKeyAsRaw identity


{-|-}
exportAesGcmKeyAsJwk aesLength =
    exportAesGcmKey aesLength Crypto.exportAesGcmKeyAsJwk identity


{-|-}
exportAesCtrKey aesLength =
    exportKey (generateAesCtrKey aesLength)


{-|-}
exportAesCbcKey aesLength =
    exportKey (generateAesCbcKey aesLength)


{-|-}
exportAesGcmKey aesLength =
    exportKey (generateAesGcmKey aesLength)



-- EXPORT KEY UTILS


{-|-}
exportKey keyGenFunc exportKeyFunc keyFunc =
    keyGenFunc
        |> Task.mapError (\_ -> Crypto.KeyNotExportable)
        |> Task.andThen
                (\{ key, secureContext } ->
                    exportKeyFunc secureContext (keyFunc key)
                        |> Task.map
                                (\exportedKey ->
                                    { key = key
                                    , exportedKey = exportedKey
                                    , secureContext = secureContext
                                    }
                                )
                )



-- IMPORT RSA-OAEP KEYS


{-|-}
importRsaOaepPublicKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPublicKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPublicKeyFromJwk
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPublicKeyFromSpki keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPublicKeyAsSpki keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPublicKeyFromSpki
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPrivateKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPrivateKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPrivateKeyFromJwk
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPrivateKeyFromPkcs8 keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPrivateKeyAsPkcs8 keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPrivateKeyFromPkcs8
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPublicKeyFromJwkWithArbitraryJson keyHash keyExponent importHash json =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPublicKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPublicKeyFromJwk
                secureContext
                json
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPublicKeyFromSpkiWithArbitraryBytes keyHash keyExponent importHash bytes =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPublicKeyAsSpki keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPublicKeyFromSpki
                secureContext
                bytes
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )



-- IMPORT RSA-PSS KEYS


{-|-}
importRsaPssPublicKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaPssPublicKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaPssPublicKeyFromJwk
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaPssPublicKeyFromSpki keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaPssPublicKeyAsSpki keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaPssPublicKeyFromSpki
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaPssPrivateKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaPssPrivateKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaPssPrivateKeyFromJwk
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaPssPrivateKeyFromPkcs8 keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaPssPrivateKeyAsPkcs8 keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaPssPrivateKeyFromPkcs8
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )



-- IMPORT RSA-SSA-PKCS1V1.5K KEYS


{-|-}
importRsaSsaPkcs1V1_5PublicKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaSsaPkcs1V1_5PrivateKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaSsaPkcs1V1_5PublicKeyFromJwk
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaSsaPkcs1V1_5PublicKeyFromSpki keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaSsaPkcs1V1_5PublicKeyAsSpki keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaSsaPkcs1V1_5PublicKeyFromSpki
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaSsaPkcs1V1_5PrivateKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaSsaPkcs1V1_5PrivateKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaSsaPkcs1V1_5PrivateKeyFromJwk
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaSsaPkcs1V1_5PrivateKeyFromPkcs8 keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaSsaPkcs1V1_5PrivateKeyAsPkcs8 keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaSsaPkcs1V1_5PrivateKeyFromPkcs8
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )



-- IMPORT AES KEYS


{-|-}
importAesCtrKeyFromJwk aesLength =
    importKey Crypto.ImportAesKeyError (exportAesCtrKeyAsJwk aesLength) (\{ secureContext, exportedKey } -> Crypto.importAesCtrKeyFromJwk secureContext exportedKey Crypto.CanBeExtracted)


{-|-}
importAesCtrKeyFromRaw aesLength =
    importKey Crypto.ImportAesKeyError (exportAesCtrKeyAsRaw aesLength) (\{ secureContext, exportedKey } -> Crypto.importAesCtrKeyFromRaw secureContext exportedKey Crypto.CanBeExtracted)


{-|-}
importAesCbcKeyFromJwk aesLength =
    importKey Crypto.ImportAesKeyError (exportAesCbcKeyAsJwk aesLength) (\{ secureContext, exportedKey } -> Crypto.importAesCbcKeyFromJwk secureContext exportedKey Crypto.CanBeExtracted)


{-|-}
importAesCbcKeyFromRaw aesLength =
    importKey Crypto.ImportAesKeyError (exportAesCbcKeyAsRaw aesLength) (\{ secureContext, exportedKey } -> Crypto.importAesCbcKeyFromRaw secureContext exportedKey Crypto.CanBeExtracted)


{-|-}
importAesGcmKeyFromJwk aesLength =
    importKey Crypto.ImportAesKeyError (exportAesGcmKeyAsJwk aesLength) (\{ secureContext, exportedKey } -> Crypto.importAesGcmKeyFromJwk secureContext exportedKey Crypto.CanBeExtracted)


{-|-}
importAesGcmKeyFromRaw aesLength =
    importKey Crypto.ImportAesKeyError (exportAesGcmKeyAsRaw aesLength) (\{ secureContext, exportedKey } -> Crypto.importAesGcmKeyFromRaw secureContext exportedKey Crypto.CanBeExtracted)



-- IMPORT ECD KEYS


{-|-}
importEcdsaPublicKeyFromJwk =
    Debug.todo ""


{-|-}
importEcdsaPublicKeyFromRaw =
    Debug.todo ""


{-|-}
importEcdsaPublicKeyFromSpki =
    Debug.todo ""


{-|-}
importEcdsaPrivateKeyFromJwk =
    Debug.todo ""


{-|-}
importEcdsaPrivateKeyFromPkcs8 =
    Debug.todo ""


{-|-}
importEcdhPublicKeyFromJwk =
    Debug.todo ""


{-|-}
importEcdhPublicKeyFromRaw =
    Debug.todo ""


{-|-}
importEcdhPublicKeyFromSpki =
    Debug.todo ""


{-|-}
importEcdhPrivateKeyFromJwk =
    Debug.todo ""


{-|-}
importEcdhPrivateKeyFromPkcs8 =
    Debug.todo ""



-- IMPORT HMAC KEYS


{-|-}
importHmacKeyFromJwk keyHash keyExponent importHash importLength =
    importKey Crypto.ImportHmacKeyError (exportHmacKeyAsJwk keyHash keyExponent) (\{ secureContext, exportedKey } -> Crypto.importHmacKeyFromJwk secureContext exportedKey importHash importLength Crypto.CanBeExtracted)


{-|-}
importHmacKeyFromRaw keyHash keyExponent importHash importLength =
    importKey Crypto.ImportHmacKeyError (exportHmacKeyAsRaw keyHash keyExponent) (\{ secureContext, exportedKey } -> Crypto.importHmacKeyFromRaw secureContext exportedKey importHash importLength Crypto.CanBeExtracted)



-- IMPORT KEY UTILS


{-|-}
importKey errorMap exportFunc importFunc =
    exportFunc
        |> Task.mapError (\_ -> errorMap)
        |> Task.andThen
                (\data ->
                    importFunc data
                        |> Task.map
                                (\importedKey ->
                                    { key = data.key
                                    , secureContext = data.secureContext
                                    , exportedKey = data.exportedKey
                                    , importedKey = importedKey
                                    }
                                )
                )



-- Utilities


{-|-}
successString id =
    "✓ - " ++ id


{-|-}
failureString id =
    "x - " ++ id


{-|-}
expectSuccess test id task =
    test task (successString id) (failureString id)


{-|-}
expectFailure test id task =
    test task (failureString id) (successString id)


{-|-}
testHelper : (String -> msg) -> String -> String -> Result a b -> msg
testHelper func success failure result =
    result
        |> Result.map (\_ -> func success)
        |> Result.withDefault (func failure)
