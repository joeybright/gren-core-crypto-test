module Tests exposing (..)

{-|-}

import Bytes.Encode
import Crypto
import Json.Encode
import Task exposing ( Task )


{-|-}
count : Int
count =
    tests (\_ -> {})
        |> Array.length


{-| All of the tests in this module.
-}
tests : (String -> msg) -> Array (Cmd msg)
tests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "Secure context - " ++ String.fromInt int
    in
    [ expectSuccess test (testId 1) getSecureContext
    ]
        ++ rsaTests func
        ++ randomValueTests func
        ++ uuidTests func



-- Secure context


{-|-}
getSecureContext : Task {} Crypto.SecureContext
getSecureContext =
    Crypto.isSecureContext



-- Random values


randomValueTests : (String -> msg) -> Array (Cmd msg)
randomValueTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "Random value tests - " ++ String.fromInt int

        maxInt8Values =
            65536

        maxInt16Values =
            32768

        maxInt32Values =
            16384

        testGeneratedValueCount num success failure res =
            if Array.length res == num then
                func success
            else
                func failure
    in
    [ expectSuccess test (testId 1) (Crypto.getRandomInt8Values 3)
    , expectSuccess test (testId 2) (Crypto.getRandomInt8Values 99999)
    , expectSuccess test (testId 3) (Crypto.getRandomInt8Values -99999)
    , expectSuccess test (testId 4) (Crypto.getRandomUInt8Values 3)
    , expectSuccess test (testId 5) (Crypto.getRandomUInt8Values 99999)
    , expectSuccess test (testId 6) (Crypto.getRandomUInt8Values -99999)
    , expectSuccess test (testId 7) (Crypto.getRandomInt16Values 3)
    , expectSuccess test (testId 8) (Crypto.getRandomInt16Values 99999)
    , expectSuccess test (testId 9) (Crypto.getRandomInt16Values -99999)
    , expectSuccess test (testId 10) (Crypto.getRandomUInt16Values 3)
    , expectSuccess test (testId 11) (Crypto.getRandomUInt16Values 99999)
    , expectSuccess test (testId 12) (Crypto.getRandomUInt16Values -99999)
    , expectSuccess test (testId 13) (Crypto.getRandomInt32Values 3)
    , expectSuccess test (testId 14) (Crypto.getRandomInt32Values 99999)
    , expectSuccess test (testId 15) (Crypto.getRandomInt32Values -99999)
    , expectSuccess test (testId 16) (Crypto.getRandomUInt32Values 3)
    , expectSuccess test (testId 17) (Crypto.getRandomUInt32Values 99999)
    , expectSuccess test (testId 18) (Crypto.getRandomUInt32Values -99999)
    ]



-- UUID generation


uuidTests : (String -> msg) -> Array (Cmd msg)
uuidTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "Uuid  - " ++ String.fromInt int

        generateRandomUuid =
            getSecureContext
                |> Task.andThen (\secureContext -> Crypto.randomUuid secureContext)
    in
    [ expectSuccess test (testId 1) generateRandomUuid
    ]



-- RSA algorithm


{-|-}
rsaTests : (String -> msg) -> Array (Cmd msg)
rsaTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "RSA key - " ++ String.fromInt int

        generate =
            [ expectSuccess test (testId 1) (generateRsaOaepKeyPair Crypto.Sha256 Crypto.PublicExponent65537)
            , expectSuccess test (testId 2) (generateRsaOaepKeyPair Crypto.Sha256 Crypto.PublicExponent3)
            , expectSuccess test (testId 3) (generateRsaOaepKeyPair Crypto.Sha384 Crypto.PublicExponent65537)
            , expectSuccess test (testId 4) (generateRsaOaepKeyPair Crypto.Sha384 Crypto.PublicExponent3)
            , expectSuccess test (testId 5) (generateRsaOaepKeyPair Crypto.Sha512 Crypto.PublicExponent65537)
            , expectSuccess test (testId 6) (generateRsaOaepKeyPair Crypto.Sha512 Crypto.PublicExponent3)
            ]

        -- RsaPssPublicKey
        -- exportRsaPssPublicKeyAsSpki
        -- importRsaPssPublicKeyFromSpki
        -- exportRsaPssPublicKeyAsJwk
        -- importRsaPssPublicKeyFromJwk
        -- 
        -- RsaPssPrivateKey
        -- exportRsaPssPrivateKeyAsPkcs8
        -- importRsaPssPrivateKeyFromPkcs8
        -- exportRsaPssPrivateKeyAsJwk
        -- importRsaPssPrivateKeyFromJwk
        -- 
        -- RsaSsaPkcs1V1_5PublicKey
        -- exportRsaSsaPkcs1V1_5PublicKeyAsSpki
        -- importRsaSsaPkcs1V1_5PublicKeyFromSpki
        -- exportRsaSsaPkcs1V1_5PublicKeyAsJwk
        -- importRsaSsaPkcs1V1_5PublicKeyFromJwk
        -- 
        -- RsaSsaPkcs1V1_5PrivateKey
        -- exportRsaSsaPkcs1V1_5PrivateKeyAsPkcs8
        -- importRsaSsaPkcs1V1_5PrivateKeyFromPkcs8
        -- exportRsaSsaPkcs1V1_5PrivateKeyAsJwk
        -- importRsaSsaPkcs1V1_5PrivateKeyFromJwk
    in
    generate ++ rsaOaepPublicKeyTests func ++ rsaOaepPrivateKeyTests func


{-|-}
rsaOaepPublicKeyTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "RSA-OAEP public key - " ++ String.fromInt int

        exportAsJwk =
            [ expectSuccess test (testId 1) (exportRsaOaepPublicKeyAsJwk Crypto.Sha256 Crypto.PublicExponent65537)
            , expectSuccess test (testId 2) (exportRsaOaepPublicKeyAsJwk Crypto.Sha256 Crypto.PublicExponent3)
            , expectSuccess test (testId 3) (exportRsaOaepPublicKeyAsJwk Crypto.Sha384 Crypto.PublicExponent65537)
            , expectSuccess test (testId 4) (exportRsaOaepPublicKeyAsJwk Crypto.Sha384 Crypto.PublicExponent3)
            , expectSuccess test (testId 5) (exportRsaOaepPublicKeyAsJwk Crypto.Sha512 Crypto.PublicExponent65537)
            , expectSuccess test (testId 6) (exportRsaOaepPublicKeyAsJwk Crypto.Sha512 Crypto.PublicExponent3)
            ]

        importFromJwk =
            [ expectSuccess test (testId 7) (importRsaOaepPublicKeyFromJwk Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha256)
            , expectSuccess test (testId 8) (importRsaOaepPublicKeyFromJwk Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha256)
            , expectSuccess test (testId 9) (importRsaOaepPublicKeyFromJwk Crypto.Sha384 Crypto.PublicExponent65537 Crypto.Sha384)
            , expectSuccess test (testId 10) (importRsaOaepPublicKeyFromJwk Crypto.Sha384 Crypto.PublicExponent3 Crypto.Sha384)
            , expectSuccess test (testId 11) (importRsaOaepPublicKeyFromJwk Crypto.Sha512 Crypto.PublicExponent65537 Crypto.Sha512)
            , expectSuccess test (testId 12) (importRsaOaepPublicKeyFromJwk Crypto.Sha512 Crypto.PublicExponent3 Crypto.Sha512)
            ]

        importFromJwkFailures =
            [ expectFailure test (testId 13) (importRsaOaepPublicKeyFromJwk Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha384)
            , expectFailure test (testId 14) (importRsaOaepPublicKeyFromJwk Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha384)
            , expectFailure test (testId 15) (importRsaOaepPublicKeyFromJwk Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha512)
            , expectFailure test (testId 16) (importRsaOaepPublicKeyFromJwk Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha512)
            , expectFailure test (testId 17) 
                (importRsaOaepPublicKeyFromJwkWithArbitraryJson
                    Crypto.Sha256
                    Crypto.PublicExponent3
                    Crypto.Sha256
                    (Json.Encode.object
                        [ { key = "test"
                          , value = Json.Encode.string "test"
                          }
                        ]
                    )
                )
            ]

        exportAsSpki =
            [ expectSuccess test (testId 18) (exportRsaOaepPublicKeyAsSpki Crypto.Sha256 Crypto.PublicExponent65537) 
            , expectSuccess test (testId 19) (exportRsaOaepPublicKeyAsSpki Crypto.Sha256 Crypto.PublicExponent3)
            , expectSuccess test (testId 20) (exportRsaOaepPublicKeyAsSpki Crypto.Sha384 Crypto.PublicExponent65537) 
            , expectSuccess test (testId 21) (exportRsaOaepPublicKeyAsSpki Crypto.Sha384 Crypto.PublicExponent3) 
            , expectSuccess test (testId 22) (exportRsaOaepPublicKeyAsSpki Crypto.Sha512 Crypto.PublicExponent65537)
            , expectSuccess test (testId 23) (exportRsaOaepPublicKeyAsSpki Crypto.Sha512 Crypto.PublicExponent3)
            , expectSuccess test (testId 24) (importRsaOaepPublicKeyFromSpki Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha384)
            ]

        importFromSpki =
            [ expectSuccess test (testId 25) (importRsaOaepPublicKeyFromSpki Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha256)
            , expectSuccess test (testId 26) (importRsaOaepPublicKeyFromSpki Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha256)
            , expectSuccess test (testId 27) (importRsaOaepPublicKeyFromSpki Crypto.Sha384 Crypto.PublicExponent65537 Crypto.Sha384)
            , expectSuccess test (testId 28) (importRsaOaepPublicKeyFromSpki Crypto.Sha384 Crypto.PublicExponent3 Crypto.Sha384)
            , expectSuccess test (testId 29) (importRsaOaepPublicKeyFromSpki Crypto.Sha512 Crypto.PublicExponent65537 Crypto.Sha512)
            , expectSuccess test (testId 30) (importRsaOaepPublicKeyFromSpki Crypto.Sha512 Crypto.PublicExponent3 Crypto.Sha512)
            ]

        importFromSpkiFailures =
            [ expectFailure test (testId 31) (importRsaOaepPublicKeyFromSpkiWithArbitraryBytes Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha256 (Bytes.Encode.encode (Bytes.Encode.string "hello")))
            ]
    in
    exportAsJwk ++ importFromJwk ++ importFromJwkFailures ++ exportAsSpki ++ importFromSpki ++ importFromSpkiFailures


{-|-}
rsaOaepPrivateKeyTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        testId int =
            "RSA-OAEP private key - " ++ String.fromInt int

        exportAsJwk =
            [ expectSuccess test (testId 1) (exportRsaOaepPrivateKeyAsJwk Crypto.Sha256 Crypto.PublicExponent3)
            , expectSuccess test (testId 2) (exportRsaOaepPrivateKeyAsJwk Crypto.Sha384 Crypto.PublicExponent3)
            , expectSuccess test (testId 3) (exportRsaOaepPrivateKeyAsJwk Crypto.Sha512 Crypto.PublicExponent3)
            , expectSuccess test (testId 4) (exportRsaOaepPrivateKeyAsJwk Crypto.Sha256 Crypto.PublicExponent65537)
            , expectSuccess test (testId 5) (exportRsaOaepPrivateKeyAsJwk Crypto.Sha384 Crypto.PublicExponent65537)
            , expectSuccess test (testId 6) (exportRsaOaepPrivateKeyAsJwk Crypto.Sha512 Crypto.PublicExponent65537)
            ]

        exportAsPkcs8 =
            [ expectSuccess test (testId 7) (exportRsaOaepPrivateKeyAsPkcs8 Crypto.Sha256 Crypto.PublicExponent3)
            , expectSuccess test (testId 8) (exportRsaOaepPrivateKeyAsPkcs8 Crypto.Sha384 Crypto.PublicExponent3)
            , expectSuccess test (testId 9) (exportRsaOaepPrivateKeyAsPkcs8 Crypto.Sha512 Crypto.PublicExponent3)
            , expectSuccess test (testId 10) (exportRsaOaepPrivateKeyAsPkcs8 Crypto.Sha256 Crypto.PublicExponent65537)
            , expectSuccess test (testId 11) (exportRsaOaepPrivateKeyAsPkcs8 Crypto.Sha384 Crypto.PublicExponent65537)
            , expectSuccess test (testId 12) (exportRsaOaepPrivateKeyAsPkcs8 Crypto.Sha512 Crypto.PublicExponent65537)
            ]

        importFromJwk =
            [ expectSuccess test (testId 13) (importRsaOaepPrivateKeyFromJwk Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha256)
            , expectSuccess test (testId 14) (importRsaOaepPrivateKeyFromJwk Crypto.Sha384 Crypto.PublicExponent3 Crypto.Sha384)
            , expectSuccess test (testId 15) (importRsaOaepPrivateKeyFromJwk Crypto.Sha512 Crypto.PublicExponent3 Crypto.Sha512)
            , expectSuccess test (testId 16) (importRsaOaepPrivateKeyFromJwk Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha256)
            , expectSuccess test (testId 17) (importRsaOaepPrivateKeyFromJwk Crypto.Sha384 Crypto.PublicExponent65537 Crypto.Sha384)
            , expectSuccess test (testId 19) (importRsaOaepPrivateKeyFromJwk Crypto.Sha512 Crypto.PublicExponent65537 Crypto.Sha512)
                -- Failure because of mismatched hash of created key and import
            , expectFailure test (testId 26) (importRsaOaepPrivateKeyFromJwk Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha512)
            ]

        importFromPkcs8 =
            [ expectSuccess test (testId 20) (importRsaOaepPrivateKeyFromPkcs8 Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha256)
            , expectSuccess test (testId 21) (importRsaOaepPrivateKeyFromPkcs8 Crypto.Sha384 Crypto.PublicExponent3 Crypto.Sha384)
            , expectSuccess test (testId 22) (importRsaOaepPrivateKeyFromPkcs8 Crypto.Sha512 Crypto.PublicExponent3 Crypto.Sha512)
            , expectSuccess test (testId 23) (importRsaOaepPrivateKeyFromPkcs8 Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha256)
            , expectSuccess test (testId 24) (importRsaOaepPrivateKeyFromPkcs8 Crypto.Sha384 Crypto.PublicExponent65537 Crypto.Sha384)
            , expectSuccess test (testId 25) (importRsaOaepPrivateKeyFromPkcs8 Crypto.Sha512 Crypto.PublicExponent65537 Crypto.Sha512)
                -- Below succeeds even though mismatched hash of created key vs. import
            , expectSuccess test (testId 27) (importRsaOaepPrivateKeyFromPkcs8 Crypto.Sha512 Crypto.PublicExponent65537 Crypto.Sha256)
            ]
    in
    exportAsJwk ++ exportAsPkcs8 ++ importFromJwk ++ importFromPkcs8


{-|-}
rsaPssPublicKeyTests func =
    Debug.log ""


{-|-}
rsaPssPrivateKeyTests func =
    Debug.log ""


{-|-}
rsaSsaPkcs1V1_5KPublicKeyTests func =
    Debug.log ""


{-|-}
rsaSsaPkcs1V1_5KPrivateKeyTests func =
    Debug.log ""



-- GENERATE KEYS


{-|-}
generateRsaOaepKeyPair hash exponent =
    generateKey
        Crypto.ModulusLengthNotDivisibleByEight
        (\secureContext ->
            Crypto.generateRsaOaepKeyPair
                secureContext
                { modulusLength = 4096
                , hash = hash
                , publicExponent = Crypto.PublicExponent65537
                }
                Crypto.CanBeExtracted
        )


{-|-}
generateRsaPssKeyPair hash exponent =
    generateKey
        Crypto.ModulusLengthNotDivisibleByEight
        (\secureContext ->
            Crypto.generateRsaPssKeyPair
                secureContext
                { modulusLength = 4096
                , hash = hash
                , publicExponent = Crypto.PublicExponent65537
                }
                Crypto.CanBeExtracted
        )


{-|-}
generateRsaSsaPkcs1V1_5KeyPair hash exponent =
    generateKey
        Crypto.ModulusLengthNotDivisibleByEight
        (\secureContext ->
            Crypto.generateRsaSsaPkcs1V1_5KeyPair
                secureContext
                { modulusLength = 4096
                , hash = hash
                , publicExponent = Crypto.PublicExponent65537
                }
                Crypto.CanBeExtracted
        )


{-|-}
generateKey errorMap keyGenFunc =
    getSecureContext
        |> Task.mapError (\_ -> errorMap)
        |> Task.andThen
                (\secureContext ->
                    keyGenFunc secureContext
                        |> Task.map
                                (\key ->
                                    { key = key
                                    , secureContext = secureContext
                                    }
                                )
                )



-- EXPORT KEYS


{-|-}
exportRsaOaepPublicKeyAsJwk hash exponent =
    exportRsaOaepKeyPair hash exponent Crypto.exportRsaOaepPublicKeyAsJwk .publicKey


{-|-}
exportRsaOaepPublicKeyAsSpki hash exponent =
    exportRsaOaepKeyPair hash exponent Crypto.exportRsaOaepPublicKeyAsSpki .publicKey


{-|-}
exportRsaOaepPrivateKeyAsJwk hash exponent =
    exportRsaOaepKeyPair hash exponent Crypto.exportRsaOaepPrivateKeyAsJwk .privateKey


{-|-}
exportRsaOaepPrivateKeyAsPkcs8 hash exponent =
    exportRsaOaepKeyPair hash exponent Crypto.exportRsaOaepPrivateKeyAsPkcs8 .privateKey


{-|-}
exportRsaPssPublicKeyAsJwk hash exponent =
    -- 
    exportRsaPssKeyPair hash exponent Crypto.exportRsaPssPublicKeyAsJwk .publicKey


{-|-}
exportRsaPssPublicKeyAsSpki hash exponent =
    -- 
    exportRsaPssKeyPair hash exponent Crypto.exportRsaPssPublicKeyAsSpki .publicKey


{-|-}
exportRsaPssPrivateKeyAsJwk hash exponent =
    -- 
    exportRsaPssKeyPair hash exponent Crypto.exportRsaPssPrivateKeyAsJwk .privateKey


{-|-}
exportRsaPssPrivateKeyAsPkcs8 hash exponent =
    -- 
    exportRsaPssKeyPair hash exponent Crypto.exportRsaPssPrivateKeyAsPkcs8 .privateKey


{-|-}
exportRsaSsaPkcs1V1_5PublicKeyAsJwk hash exponent =
    -- 
    exportRsaSsaPkcs1V1_5KeyPair hash exponent Crypto.exportRsaSsaPkcs1V1_5PublicKeyAsJwk .publicKey


{-|-}
exportRsaSsaPkcs1V1_5PublicKeyAsSpki hash exponent =
    -- 
    exportRsaSsaPkcs1V1_5KeyPair hash exponent Crypto.exportRsaSsaPkcs1V1_5PublicKeyAsSpki .publicKey


{-|-}
exportRsaSsaPkcs1V1_5PrivateKeyAsJwk hash exponent =
    -- 
    exportRsaSsaPkcs1V1_5KeyPair hash exponent Crypto.exportRsaSsaPkcs1V1_5PrivateKeyAsJwk .privateKey


{-|-}
exportRsaSsaPkcs1V1_5PrivateKeyAsPkcs8 hash exponent =
    -- 
    exportRsaSsaPkcs1V1_5KeyPair hash exponent Crypto.exportRsaSsaPkcs1V1_5PrivateKeyAsPkcs8 .privateKey


{-|-}
exportRsaOaepKeyPair hash exponent =
    exportKey (generateRsaOaepKeyPair hash exponent)


{-|-}
exportRsaPssKeyPair hash exponent =
    exportKey (generateRsaPssKeyPair hash exponent)


{-|-}
exportRsaSsaPkcs1V1_5KeyPair hash exponent =
    exportKey (generateRsaSsaPkcs1V1_5KeyPair hash exponent)


{-|-}
exportKey keyGenFunc exportKeyFunc keyFunc =
    keyGenFunc
        |> Task.mapError (\_ -> Crypto.KeyNotExportable)
        |> Task.andThen
                (\{ key, secureContext } ->
                    exportKeyFunc secureContext (keyFunc key)
                        |> Task.map
                                (\exportedKey ->
                                    { key = key
                                    , exportedKey = exportedKey
                                    , secureContext = secureContext
                                    }
                                )
                )



-- IMPORT KEYS


{-|-}
importRsaOaepPublicKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPublicKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPublicKeyFromJwk
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPublicKeyFromSpki keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPublicKeyAsSpki keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPublicKeyFromSpki
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPrivateKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPrivateKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPrivateKeyFromJwk
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPrivateKeyFromPkcs8 keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPrivateKeyAsPkcs8 keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPrivateKeyFromPkcs8
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPublicKeyFromJwkWithArbitraryJson keyHash keyExponent importHash json =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPublicKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPublicKeyFromJwk
                secureContext
                json
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPublicKeyFromSpkiWithArbitraryBytes keyHash keyExponent importHash bytes =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPublicKeyAsSpki keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPublicKeyFromSpki
                secureContext
                bytes
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importKey errorMap exportFunc importFunc =
    exportFunc
        |> Task.mapError (\_ -> errorMap)
        |> Task.andThen
                (\data ->
                    importFunc data
                        |> Task.map
                                (\importedKey ->
                                    { key = data.key
                                    , secureContext = data.secureContext
                                    , exportedKey = data.exportedKey
                                    , importedKey = importedKey
                                    }
                                )
                )



-- AES algorithm
-- 
-- AesCtrKey
-- exportAesCtrKeyAsRaw
-- importAesCtrKeyFromRaw
-- exportAesCtrKeyAsJwk
-- importAesCtrKeyFromJwk
-- 
-- AesCbcKey
-- exportAesCbcKeyAsRaw
-- importAesCbcKeyFromRaw
-- exportAesCbcKeyAsJwk
-- importAesCbcKeyFromJwk
-- 
-- AesGcmKey
-- exportAesGcmKeyAsRaw
-- importAesGcmKeyFromRaw
-- exportAesGcmKeyAsJwk
-- importAesGcmKeyFromJwk
-- 
-- 
-- ECD algorithm
-- 
-- EcdsaKeyPrivateKey
-- exportEcdsaPrivateKeyAsPkcs8
-- importEcdsaPrivateKeyFromPkcs8
-- exportEcdsaPrivateKeyAsJwt
-- importEcdsaPrivateKeyFromJwt
-- 
-- EcdsaKeyPublicKey
-- exportEcdsaPublicKeyAsRaw
-- importEcdsaPublicKeyFromRaw
-- exportEcdsaPublicKeyAsSpki
-- importEcdsaPublicKeyFromSpki
-- exportEcdsaPublicKeyAsJwt
-- importEcdsaPublicKeyFromJwt
-- 
-- EcdhKeyPrivateKey
-- exportEcdhPrivateKeyAsPkcs8
-- importEcdhPrivateKeyFromPkcs8
-- exportEcdhPrivateKeyAsJwt
-- importEcdhPrivateKeyFromJwt
-- 
-- EcdhKeyPublicKey
-- exportEcdhPublicKeyAsRaw
-- importEcdhPublicKeyFromRaw
-- exportEcdhPublicKeyAsSpki
-- importEcdhPublicKeyFromSpki
-- exportEcdhPublicKeyAsJwt
-- importEcdhPublicKeyFromJwt
-- 
-- 
-- HMAC algorithm
-- 
-- HmacKey
-- exportHmacKeyAsRaw
-- importHmacKeyFromRaw
-- exportHmacKeyAsJwk
-- importHmacKeyFromJwk
-- 
-- 
-- Utilities


{-|-}
successString id =
    "✓ - " ++ id


{-|-}
failureString id =
    "x - " ++ id


{-|-}
expectSuccess test id task =
    test task (successString id) (failureString id)


{-|-}
expectFailure test id task =
    test task (failureString id) (successString id)


{-|-}
testHelper : (String -> msg) -> String -> String -> Result a b -> msg
testHelper func success failure result =
    result
        |> Result.map (\_ -> func success)
        |> Result.withDefault (func failure)
