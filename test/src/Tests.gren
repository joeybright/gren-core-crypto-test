module Tests exposing (..)

{-|-}

import Bytes.Encode
import Crypto
import Json.Encode
import Task exposing ( Task )


{-|-}
count : Int
count =
    tests (\_ -> {})
        |> Array.length


{-| All of the tests in this module.
-}
tests : (String -> msg) -> Array (Cmd msg)
tests func =
    getSecurecontextTests func
        ++ randomValueTests func
        ++ uuidTests func
        ++ rsaKeyTests func
        ++ hmacKeyTests func
        ++ aesKeyTests func
        ++ ecKeyTests func



-- Secure context


{-|-}
getSecureContext : Task {} Crypto.SecureContext
getSecureContext =
    Crypto.isSecureContext


{-|-}
getSecurecontextTests func =
    let
        testLabel int =
            "Secure context - " ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)
    in
    [ expectSuccess 1 getSecureContext
    ]



-- Random values


{-|-}
randomValueTests : (String -> msg) -> Array (Cmd msg)
randomValueTests func =
    let
        testLabel int =
            "Random value tests - " ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)

        testGeneratedValueCount num =
            Task.mapError (\_ -> {})
                >> Task.andThen
                        (\res ->
                            if Array.length res == num then
                                Task.succeed {}
                            else
                                Task.fail {}
                        )
    in
    [ expectSuccess 1 (Crypto.getRandomInt8Values 3)
    , expectSuccess 2 (Crypto.getRandomInt8Values 99999)
    , expectSuccess 3 (Crypto.getRandomInt8Values -99999)
    , expectSuccess 4 (Crypto.getRandomUInt8Values 3)
    , expectSuccess 5 (Crypto.getRandomUInt8Values 99999)
    , expectSuccess 6 (Crypto.getRandomUInt8Values -99999)
    , expectSuccess 7 (Crypto.getRandomInt16Values 3)
    , expectSuccess 8 (Crypto.getRandomInt16Values 99999)
    , expectSuccess 9 (Crypto.getRandomInt16Values -99999)
    , expectSuccess 10 (Crypto.getRandomUInt16Values 3)
    , expectSuccess 11 (Crypto.getRandomUInt16Values 99999)
    , expectSuccess 12 (Crypto.getRandomUInt16Values -99999)
    , expectSuccess 13 (Crypto.getRandomInt32Values 3)
    , expectSuccess 14 (Crypto.getRandomInt32Values 99999)
    , expectSuccess 15 (Crypto.getRandomInt32Values -99999)
    , expectSuccess 16 (Crypto.getRandomUInt32Values 3)
    , expectSuccess 17 (Crypto.getRandomUInt32Values 99999)
    , expectSuccess 18 (Crypto.getRandomUInt32Values -99999)
        {- Testing to make sure the max and min of generated values is respected, even
        when the number of values requested is higher (or lower) than the max value
        -}
    , expectSuccess 19 (testGeneratedValueCount 0 (Crypto.getRandomUInt32Values -99999))
    , expectSuccess 20 (testGeneratedValueCount 16384 (Crypto.getRandomUInt32Values 99999))
    , expectSuccess 21 (testGeneratedValueCount 0 (Crypto.getRandomUInt16Values -99999))
    , expectSuccess 22 (testGeneratedValueCount 32768 (Crypto.getRandomUInt16Values 99999))
    , expectSuccess 23 (testGeneratedValueCount 0 (Crypto.getRandomUInt8Values -99999))
    , expectSuccess 24 (testGeneratedValueCount 65536 (Crypto.getRandomUInt8Values 99999))
    ]



-- UUID generation


uuidTests : (String -> msg) -> Array (Cmd msg)
uuidTests func =
    let
        testLabel int =
            "Uuid  - " ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)

        generateRandomUuid =
            getSecureContext
                |> Task.andThen (\secureContext -> Crypto.randomUuid secureContext)
    in
    [ expectSuccess 1 generateRandomUuid
    ]



-- RSA KEY TESTS


{-|-}
rsaKeyTests : (String -> msg) -> Array (Cmd msg)
rsaKeyTests func =
    let
        testLabel int =
            "RSA key - " ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)

        generate =
            [ expectSuccess 1 (generateRsaOaepKeyPair Crypto.Sha256 Crypto.PublicExponent65537)
            , expectSuccess 2 (generateRsaOaepKeyPair Crypto.Sha256 Crypto.PublicExponent3)
            , expectSuccess 3 (generateRsaOaepKeyPair Crypto.Sha384 Crypto.PublicExponent65537)
            , expectSuccess 4 (generateRsaOaepKeyPair Crypto.Sha384 Crypto.PublicExponent3)
            , expectSuccess 5 (generateRsaOaepKeyPair Crypto.Sha512 Crypto.PublicExponent65537)
            , expectSuccess 6 (generateRsaOaepKeyPair Crypto.Sha512 Crypto.PublicExponent3)
            ]
    in
    generate ++ rsaOaepPublicKeyTests func ++ rsaOaepPrivateKeyTests func ++ rsaPssPublicKeyTests func ++ rsaPssPrivateKeyTests func ++ rsaSsaPkcs1V1_5KPublicKeyTests func ++ rsaSsaPkcs1V1_5KPrivateKeyTests func


{-|-}
rsaOaepPublicKeyTests func =
    let
        testLabel int =
            "RSA-OAEP public key - " ++ String.fromInt int

        expectFailure int =
            expectFailureHelper (testHelper func) (testLabel int)

        exportAsJwk =
            exportRsaKeyTests "RSA-OAEP public key export jwk - " exportRsaOaepPublicKeyAsJwk func

        exportAsSpki =
            exportRsaKeyTests "RSA-OAEP public key export spki - " exportRsaOaepPublicKeyAsSpki func

        importFromJwk =
            importRsaKeyTests "RSA-OAEP public key import jwk - " importRsaOaepPublicKeyFromJwk func

        importFromSpki =
            importRsaKeyTests "RSA-OAEP public key import spki - " importRsaOaepPublicKeyFromSpki func

        importFromSpkiFailures =
            [ expectFailure 31 (importRsaOaepPublicKeyFromSpkiWithArbitraryBytes Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha256 (Bytes.Encode.encode (Bytes.Encode.string "hello")))
            ]

        encrypt =
            encryptWithRsaOaepTests "RSA-OAEP public key encrypt - " func
    in
    exportAsJwk ++ importFromJwk ++ exportAsSpki ++ importFromSpki ++ importFromSpkiFailures ++ encrypt


{-|-}
rsaOaepPrivateKeyTests func =
    let
        exportAsJwk =
            exportRsaKeyTests "RSA-OAEP private key export jwk - " exportRsaOaepPrivateKeyAsJwk func

        exportAsPkcs8 =
            exportRsaKeyTests "RSA-OAEP private key export pkcs8 - " exportRsaOaepPrivateKeyAsPkcs8 func

        importFromJwk =
            importRsaKeyTests "RSA-OAEP private key import jwk - " importRsaOaepPrivateKeyFromJwk func

        importFromPkcs8 =
            importRsaKeyTests "RSA-OAEP public key import pkcs8 - " importRsaOaepPrivateKeyFromPkcs8 func

        decrypt =
            decryptWithRsaOaepTests "RSA-OAEP private key decrypt - " func
    in
    exportAsJwk ++ exportAsPkcs8 ++ importFromJwk ++ importFromPkcs8 ++ decrypt


{-|-}
rsaPssPublicKeyTests func =
    let
        exportAsJwk =
            exportRsaKeyTests "RSA-PSS public key export jwk - " exportRsaPssPublicKeyAsJwk func

        exportAsSpki =
            exportRsaKeyTests "RSA-PSS public key export spki - " exportRsaPssPublicKeyAsSpki func

        importAsJwk =
            importRsaKeyTests "RSA-PSS public key import jwk - " importRsaPssPublicKeyFromJwk func

        importAsSpki =
            importRsaKeyTests "RSA-PSS public key import spki - " importRsaPssPublicKeyFromSpki func
    in
    exportAsJwk ++ importAsJwk ++ exportAsSpki ++ importAsSpki


{-|-}
rsaPssPrivateKeyTests func =
    let
        exportAsJwk =
            exportRsaKeyTests "RSA-PSS private key export jwk - " exportRsaPssPrivateKeyAsJwk func

        exportAsPkcs8 =
            exportRsaKeyTests "RSA-PSS private key export pkcs8 - " exportRsaPssPrivateKeyAsPkcs8 func

        importFromJwk =
            importRsaKeyTests "RSA-PSS private key import jwk - " importRsaPssPrivateKeyFromJwk func

        importFromPkcs8 =
            importRsaKeyTests "RSA-PSS private key import pkcs8 - " importRsaPssPrivateKeyFromPkcs8 func
    in
    exportAsJwk ++ exportAsPkcs8 ++ importFromJwk ++ importFromPkcs8


{-|-}
rsaSsaPkcs1V1_5KPublicKeyTests func =
    let
        exportAsJwk =
            exportRsaKeyTests "RSASSA-PKCS1-v1_5 public key export jwk - " exportRsaSsaPkcs1V1_5PublicKeyAsJwk func

        exportAsSpki =
            exportRsaKeyTests "RSASSA-PKCS1-v1_5 public key export spki - " exportRsaSsaPkcs1V1_5PublicKeyAsSpki func

        importAsJwk =
            importRsaKeyTests "RSASSA-PKCS1-v1_5 public key import jwk - " importRsaSsaPkcs1V1_5PublicKeyFromJwk func

        importAsSpki =
            importRsaKeyTests "RSASSA-PKCS1-v1_5 public key import spki - " importRsaSsaPkcs1V1_5PublicKeyFromSpki func
    in
    exportAsJwk ++ importAsJwk ++ exportAsSpki ++ importAsSpki


{-|-}
rsaSsaPkcs1V1_5KPrivateKeyTests func =
    let
        exportAsJwk =
            exportRsaKeyTests "RSASSA-PKCS1-v1_5 public key export jwk - " exportRsaSsaPkcs1V1_5PrivateKeyAsJwk func

        exportAsSpki =
            exportRsaKeyTests "RSASSA-PKCS1-v1_5 public key export spki - " exportRsaSsaPkcs1V1_5PrivateKeyAsPkcs8 func

        importAsJwk =
            importRsaKeyTests "RSASSA-PKCS1-v1_5 public key import jwk - " importRsaSsaPkcs1V1_5PrivateKeyFromJwk func

        importAsSpki =
            importRsaKeyTests "RSASSA-PKCS1-v1_5 public key import spki - " importRsaSsaPkcs1V1_5PrivateKeyFromPkcs8 func
    in
    exportAsJwk ++ importAsJwk ++ exportAsSpki ++ importAsSpki


{-|-}
exportRsaKeyTests string jwkFunc func =
    let
        testLabel int =
            string ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)
    in
    [ expectSuccess 1 (jwkFunc Crypto.Sha256 Crypto.PublicExponent3)
    , expectSuccess 2 (jwkFunc Crypto.Sha384 Crypto.PublicExponent3)
    , expectSuccess 3 (jwkFunc Crypto.Sha512 Crypto.PublicExponent3)
    , expectSuccess 4 (jwkFunc Crypto.Sha256 Crypto.PublicExponent65537)
    , expectSuccess 5 (jwkFunc Crypto.Sha384 Crypto.PublicExponent65537)
    , expectSuccess 6 (jwkFunc Crypto.Sha512 Crypto.PublicExponent65537)
    ]


{-|-}
importRsaKeyTests string jwkFunc func =
    let
        testLabel int =
            string ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)
    in
    [ expectSuccess 1 (jwkFunc Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha256)
    , expectSuccess 2 (jwkFunc Crypto.Sha384 Crypto.PublicExponent3 Crypto.Sha384)
    , expectSuccess 3 (jwkFunc Crypto.Sha512 Crypto.PublicExponent3 Crypto.Sha512)
    , expectSuccess 4 (jwkFunc Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha256)
    , expectSuccess 5 (jwkFunc Crypto.Sha384 Crypto.PublicExponent65537 Crypto.Sha384)
    , expectSuccess 6 (jwkFunc Crypto.Sha512 Crypto.PublicExponent65537 Crypto.Sha512)
    ]



-- AES KEY TESTS


{-|-}
aesKeyTests func =
    aesCtrKeyTests func ++ aesCbcKeyTests func ++ aesGcmKeyTests func


{-|-}
aesCtrKeyTests func =
    let
        exportAsJwk =
            exportAesKeyTests "AES-CTR key export jwk - " exportAesCtrKeyAsJwk func
        
        exportAsRaw =
            exportAesKeyTests "AES-CTR key export raw - " exportAesCtrKeyAsRaw func

        importAsJwk =
            importAesKeyTests "AES-CTR key import jwk - " importAesCtrKeyFromJwk func
        
        importAsRaw =
            importAesKeyTests "AES-CTR key import raw - " importAesCtrKeyFromRaw func
    in
    exportAsJwk ++ exportAsRaw ++ importAsJwk ++ importAsRaw


{-|-}
aesCbcKeyTests func =
    let
        exportAsJwk =
            exportAesKeyTests "AES-CBC key export jwk - " exportAesCbcKeyAsJwk func
        
        exportAsRaw =
            exportAesKeyTests "AES-CBC key export raw - " exportAesCbcKeyAsRaw func

        importAsJwk =
            importAesKeyTests "AES-CBC key import jwk - " importAesCbcKeyFromJwk func
        
        importAsRaw =
            importAesKeyTests "AES-CBC key import raw - " importAesCbcKeyFromRaw func
    in
    exportAsJwk ++ exportAsRaw ++ importAsJwk ++ importAsRaw


{-|-}
aesGcmKeyTests func =
    let
        exportAsJwk =
            exportAesKeyTests "AES-GCM key export jwk - " exportAesGcmKeyAsJwk func
        
        exportAsRaw =
            exportAesKeyTests "AES-GCM key export raw - " exportAesGcmKeyAsRaw func

        importAsJwk =
            importAesKeyTests "AES-GCM key import jwk - " importAesGcmKeyFromJwk func
        
        importAsRaw =
            importAesKeyTests "AES-GCM key import raw - " importAesGcmKeyFromRaw func
    in
    exportAsJwk ++ exportAsRaw ++ importAsJwk ++ importAsRaw


{-|-}
exportAesKeyTests string exportFunc func =
    let
        testLabel int =
            string ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)
    in
    [ expectSuccess 1 (exportFunc Crypto.AesLength128)
    , expectSuccess 2 (exportFunc Crypto.AesLength256)
    ]


{-|-}
importAesKeyTests string importFunc func =
    let
        testLabel int =
            string ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)
    in
    [ expectSuccess 1 (importFunc Crypto.AesLength128)
    , expectSuccess 2 (importFunc Crypto.AesLength256)
    ]



-- EC KEY TESTS


{-|-}
ecKeyTests func =
    ecdsaPublicKeyTests func ++ ecdsaPrivateKeyTests func ++ ecdhPublicKeyTests func ++ ecdhPrivateKeyTests func


{-|-}
ecdsaPublicKeyTests func =
    let
        exportAsJwk =
            exportEcKeyTests "ECDSA public key export jwk - " exportEcdsaPublicKeyAsJwk func

        exportAsRaw =
            exportEcKeyTests "ECDSA public key export raw - " exportEcdsaPublicKeyAsRaw func
        
        exportAsSpki =
            exportEcKeyTests "ECDSA public key export spki - " exportEcdsaPublicKeyAsSpki func

        importAsJwk =
            importEcKeyTests "ECDSA private key import jwk - " importEcdsaPublicKeyFromJwk func

        importAsRaw =
            importEcKeyTests "ECDSA private key import raw - " importEcdsaPublicKeyFromRaw func

        importAsSpki =
            importEcKeyTests "ECDSA private key import spki - " importEcdsaPublicKeyFromSpki func
    in
    exportAsJwk ++ exportAsRaw ++ exportAsSpki ++ importAsJwk ++ importAsRaw ++ importAsSpki


{-|-}
ecdsaPrivateKeyTests func =
    let
        exportAsJwk =
            exportEcKeyTests "ECDSA private key export jwk - " exportEcdsaPrivateKeyAsJwk func

        exportAsPkcs8 =
            exportEcKeyTests "ECDSA private key export pkcs8 - " exportEcdsaPrivateKeyAsPkcs8 func

        importAsJwk =
            importEcKeyTests "ECDSA private key import jwk - " importEcdsaPrivateKeyFromJwk func

        importAsPkcs8 =
            importEcKeyTests "ECDSA private key import pkcs8 - " importEcdsaPrivateKeyFromPkcs8 func
    in
    exportAsJwk ++ exportAsPkcs8 ++ importAsJwk ++ importAsPkcs8


{-|-}
ecdhPublicKeyTests func =
    let
        exportAsJwk =
            exportEcKeyTests "ECDH public key export jwk - " exportEcdhPublicKeyAsJwk func

        exportAsRaw =
            exportEcKeyTests "ECDH public key export pkcs8 - " exportEcdhPublicKeyAsRaw func

        exportAsSpki =
            exportEcKeyTests "ECDH public key export spki - " exportEcdhPublicKeyAsSpki func

        importAsJwk =
            importEcKeyTests "ECDH public key import jwk - " importEcdhPublicKeyFromJwk func

        importAsRaw =
            importEcKeyTests "ECDH public key import pkcs8 - " importEcdhPublicKeyFromRaw func

        importAsSpki =
            importEcKeyTests "ECDH public key import spki - " importEcdhPublicKeyFromSpki func
    in
    exportAsJwk ++ exportAsRaw ++ exportAsSpki ++ importAsJwk ++ importAsRaw ++ importAsSpki


{-|-}
ecdhPrivateKeyTests func =
    let
        exportAsJwk =
            exportEcKeyTests "ECDH private key export jwk - " exportEcdhPrivateKeyAsJwk func

        exportAsPkcs8 =
            exportEcKeyTests "ECDH private key export pkcs8 - " exportEcdhPrivateKeyAsPkcs8 func

        importAsJwk =
            importEcKeyTests "ECDH private key import jwk - " importEcdhPrivateKeyFromJwk func

        importAsPkcs8 =
            importEcKeyTests "ECDH private key import pkcs8 - " importEcdhPrivateKeyFromPkcs8 func
    in
    exportAsJwk ++ exportAsPkcs8 ++ importAsJwk ++ importAsPkcs8


{-|-}
exportEcKeyTests string exportFunc func =
    let
        testLabel int =
            string ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)
    in
    [ expectSuccess 7 (exportEcdhPublicKeyAsSpki Crypto.P256)
    , expectSuccess 8 (exportEcdhPublicKeyAsSpki Crypto.P384)
    , expectSuccess 9 (exportEcdhPublicKeyAsSpki Crypto.P521)
    ]


{-|-}
importEcKeyTests string importFunc func =
    let
        testLabel int =
            string ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)

        expectFailure int =
            expectFailureHelper (testHelper func) (testLabel int)
    in
    [ expectSuccess 1 (importFunc Crypto.P256 Crypto.P256 identity)
    , expectFailure 2 (importFunc Crypto.P256 Crypto.P384 identity)
    , expectFailure 3 (importFunc Crypto.P256 Crypto.P521 identity)
    , expectFailure 4 (importFunc Crypto.P384 Crypto.P256 identity)
    , expectSuccess 5 (importFunc Crypto.P384 Crypto.P384 identity)
    , expectFailure 6 (importFunc Crypto.P384 Crypto.P521 identity)
    , expectFailure 7 (importFunc Crypto.P521 Crypto.P256 identity)
    , expectFailure 8 (importFunc Crypto.P521 Crypto.P384 identity)
    , expectSuccess 9 (importFunc Crypto.P521 Crypto.P521 identity)
    ]



-- HMAC KEY TESTS


{-| All HMAC key tests

Note that these tests for importing do _not_ test for importing keys with different 
lengths. This is because of inconsistencies between results on `browser` and `node` 
platforms. The docs in `gren-core` mention this.
-}
hmacKeyTests func =
    let
        importAsJwk =
            importHmacKeyFromJwkTests "HMAC key import jwk - " func

        importAsRaw =
            importHmacKeyFromRawTests "HMAC key import raw - " func

        exportAsJwk =
            exportHmacKeyTests "HMAC key export jwk - " exportHmacKeyAsJwk func

        exportAsRawk =
            exportHmacKeyTests "HMAC key export raw - " exportHmacKeyAsRaw func

        deriveFromEcdh =
            deriveHmacKeyFromEcdhTests "HMAC derive ecdh - " func
    in
    importAsJwk ++ importAsRaw ++ exportAsJwk ++ deriveFromEcdh


{-| Importing HMAC keys from JWK tests
-}
importHmacKeyFromJwkTests string func =
    let
        testLabel int =
            string ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)

        expectFailure int =
            expectFailureHelper (testHelper func) (testLabel int)
    in
    [ expectSuccess 1 (importHmacKeyFromJwk Crypto.Sha256 Nothing Crypto.Sha256 Nothing)
    , expectFailure 2 (importHmacKeyFromJwk Crypto.Sha256 Nothing Crypto.Sha384 Nothing)
    , expectFailure 3 (importHmacKeyFromJwk Crypto.Sha256 Nothing Crypto.Sha512 Nothing)
    , expectFailure 4 (importHmacKeyFromJwk Crypto.Sha384 Nothing Crypto.Sha256 Nothing)
    , expectSuccess 5 (importHmacKeyFromJwk Crypto.Sha384 Nothing Crypto.Sha384 Nothing)
    , expectFailure 6 (importHmacKeyFromJwk Crypto.Sha384 Nothing Crypto.Sha512 Nothing)
    , expectFailure 7 (importHmacKeyFromJwk Crypto.Sha512 Nothing Crypto.Sha256 Nothing)
    , expectFailure 8 (importHmacKeyFromJwk Crypto.Sha512 Nothing Crypto.Sha384 Nothing)
    , expectSuccess 9 (importHmacKeyFromJwk Crypto.Sha512 Nothing Crypto.Sha512 Nothing)
    ]


{-| Importing HMAC keys from raw tests
-}
importHmacKeyFromRawTests string func =
    let
        testLabel int =
            string ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)
    in
    [ expectSuccess 1 (importHmacKeyFromRaw Crypto.Sha256 Nothing Crypto.Sha256 Nothing)
    , expectSuccess 2 (importHmacKeyFromRaw Crypto.Sha256 Nothing Crypto.Sha384 Nothing)
    , expectSuccess 3 (importHmacKeyFromRaw Crypto.Sha256 Nothing Crypto.Sha512 Nothing)
    , expectSuccess 4 (importHmacKeyFromRaw Crypto.Sha384 Nothing Crypto.Sha256 Nothing)
    , expectSuccess 5 (importHmacKeyFromRaw Crypto.Sha384 Nothing Crypto.Sha384 Nothing)
    , expectSuccess 6 (importHmacKeyFromRaw Crypto.Sha384 Nothing Crypto.Sha512 Nothing)
    , expectSuccess 7 (importHmacKeyFromRaw Crypto.Sha512 Nothing Crypto.Sha256 Nothing)
    , expectSuccess 8 (importHmacKeyFromRaw Crypto.Sha512 Nothing Crypto.Sha384 Nothing)
    , expectSuccess 9 (importHmacKeyFromRaw Crypto.Sha512 Nothing Crypto.Sha512 Nothing)
    ]


{-|-}
exportHmacKeyTests string exportFunc func =
    let
        testLabel int =
            string ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)

        expectFailure int =
            expectFailureHelper (testHelper func) (testLabel int)
    in
    [ expectSuccess 1 (exportFunc Crypto.Sha256 Nothing)
    , expectSuccess 2 (exportFunc Crypto.Sha384 Nothing)
    , expectSuccess 3 (exportFunc Crypto.Sha512 Nothing)
        -- Exactly 8, which is the minimum value and should succeed
    , expectSuccess 4 (exportFunc Crypto.Sha256 (Just 8))
    , expectSuccess 5 (exportFunc Crypto.Sha384 (Just 8))
    , expectSuccess 6 (exportFunc Crypto.Sha512 (Just 8))
        -- Less than 8, but clamped to at least 8 (which results in success)
    , expectSuccess 7 (exportFunc Crypto.Sha256 (Just 1))
    , expectSuccess 8 (exportFunc Crypto.Sha384 (Just 1))
    , expectSuccess 9 (exportFunc Crypto.Sha512 (Just 1))
        -- A number not divible by 8
    , expectFailure 10 (exportFunc Crypto.Sha256 (Just 14))
    , expectFailure 11 (exportFunc Crypto.Sha384 (Just 14))
    , expectFailure 12 (exportFunc Crypto.Sha512 (Just 14))
        -- Max integer value that can be passed for the `length`, but is still divisible by 8
    , expectSuccess 13 (exportFunc Crypto.Sha256 (Just 2048))
    , expectSuccess 14 (exportFunc Crypto.Sha384 (Just 2048))
    , expectSuccess 15 (exportFunc Crypto.Sha512 (Just 2048))
        -- Greater than the max integer value, should still succeed with clamped value
    , expectSuccess 16 (exportFunc Crypto.Sha256 (Just 41313431134))
    , expectSuccess 17 (exportFunc Crypto.Sha384 (Just 41313431134))
    , expectSuccess 18 (exportFunc Crypto.Sha512 (Just 41313431134))
    ]


{-|-}
deriveHmacKeyFromEcdhTests string func =
    let
        testLabel int =
            string ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)

        expectFailure int =
            expectFailureHelper (testHelper func) (testLabel int)
    in
    [ expectSuccess 1 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P256 Crypto.Sha256 Nothing) --
    , expectFailure 2 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P384 Crypto.Sha256 Nothing)
    , expectFailure 3 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P521 Crypto.Sha256 Nothing)
    , expectFailure 4 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P256 Crypto.Sha384 Nothing)
    , expectFailure 5 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P384 Crypto.Sha384 Nothing)
    , expectFailure 6 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P521 Crypto.Sha384 Nothing)
    , expectFailure 7 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P256 Crypto.Sha512 Nothing)
    , expectFailure 8 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P384 Crypto.Sha512 Nothing)
    , expectFailure 9 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P521 Crypto.Sha512 Nothing)
        -- 
    , expectFailure 10 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P256 Crypto.Sha256 Nothing)
    , expectSuccess 11 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P384 Crypto.Sha256 Nothing) --
    , expectFailure 12 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P521 Crypto.Sha256 Nothing)
    , expectFailure 13 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P256 Crypto.Sha384 Nothing)
    , expectSuccess 14 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P384 Crypto.Sha384 Nothing) --
    , expectFailure 15 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P521 Crypto.Sha384 Nothing)
    , expectFailure 16 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P256 Crypto.Sha512 Nothing)
    , expectFailure 17 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P384 Crypto.Sha512 Nothing)
    , expectFailure 18 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P521 Crypto.Sha512 Nothing)
        --
    , expectFailure 19 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P256 Crypto.Sha256 Nothing)
    , expectFailure 20 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P384 Crypto.Sha256 Nothing)
    , expectSuccess 21 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P521 Crypto.Sha256 Nothing) --
    , expectFailure 22 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P256 Crypto.Sha384 Nothing)
    , expectFailure 23 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P384 Crypto.Sha384 Nothing)
    , expectSuccess 24 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P521 Crypto.Sha384 Nothing) --
    , expectFailure 25 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P256 Crypto.Sha512 Nothing)
    , expectFailure 26 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P384 Crypto.Sha512 Nothing)
    , expectSuccess 27 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P521 Crypto.Sha512 Nothing) --
        --
    , expectSuccess 28 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P256 Crypto.Sha256 (Just 256)) --
    , expectFailure 29 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P384 Crypto.Sha256 (Just 256))
    , expectFailure 30 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P521 Crypto.Sha256 (Just 256))
    , expectSuccess 31 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P256 Crypto.Sha384 (Just 256)) --
    , expectFailure 32 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P384 Crypto.Sha384 (Just 256))
    , expectFailure 33 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P521 Crypto.Sha384 (Just 256))
    , expectSuccess 34 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P256 Crypto.Sha512 (Just 256)) --
    , expectFailure 35 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P384 Crypto.Sha512 (Just 256))
    , expectFailure 36 (deriveHmacKeyUsingEcdh Crypto.P256 Crypto.P521 Crypto.Sha512 (Just 256))
        --
    , expectFailure 37 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P256 Crypto.Sha256 (Just 384))
    , expectSuccess 38 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P384 Crypto.Sha256 (Just 384)) --
    , expectFailure 39 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P521 Crypto.Sha256 (Just 384))
    , expectFailure 40 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P256 Crypto.Sha384 (Just 384))
    , expectSuccess 41 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P384 Crypto.Sha384 (Just 384)) --
    , expectFailure 42 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P521 Crypto.Sha384 (Just 384))
    , expectFailure 43 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P256 Crypto.Sha512 (Just 384))
    , expectSuccess 44 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P384 Crypto.Sha512 (Just 384)) --
    , expectFailure 45 (deriveHmacKeyUsingEcdh Crypto.P384 Crypto.P521 Crypto.Sha512 (Just 384))
        --
    , expectFailure 46 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P256 Crypto.Sha256 (Just 512))
    , expectFailure 47 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P384 Crypto.Sha256 (Just 512))
    , expectSuccess 48 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P521 Crypto.Sha256 (Just 512)) --
    , expectFailure 49 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P256 Crypto.Sha384 (Just 512))
    , expectFailure 50 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P384 Crypto.Sha384 (Just 512))
    , expectSuccess 51 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P521 Crypto.Sha384 (Just 512)) --
    , expectFailure 52 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P256 Crypto.Sha512 (Just 512))
    , expectFailure 53 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P384 Crypto.Sha512 (Just 512))
    , expectSuccess 54 (deriveHmacKeyUsingEcdh Crypto.P521 Crypto.P521 Crypto.Sha512 (Just 512)) --
    ]



-- ENCRYPT KEY TESTS


{-|-}
encryptWithRsaOaepTests string func =
    let
        testLabel int =
            string ++ String.fromInt int

        expectSuccess int =
            expectSuccessHelper (testHelper func) (testLabel int)

        expectFailure int =
            expectFailureHelper (testHelper func) (testLabel int)
        
        testBytes =
            Bytes.Encode.encode (Bytes.Encode.string "hi")

        testKeyLabel =
            Bytes.Encode.encode (Bytes.Encode.string "testing label")
    in
    [ expectSuccess 1 (encryptWithRsaOaep Crypto.Sha256 Crypto.PublicExponent65537 Nothing testBytes)
    , expectSuccess 2 (encryptWithRsaOaep Crypto.Sha256 Crypto.PublicExponent3 Nothing testBytes)
    , expectSuccess 3 (encryptWithRsaOaep Crypto.Sha384 Crypto.PublicExponent65537 Nothing testBytes)
    , expectSuccess 4 (encryptWithRsaOaep Crypto.Sha384 Crypto.PublicExponent3 Nothing testBytes)
    , expectSuccess 5 (encryptWithRsaOaep Crypto.Sha512 Crypto.PublicExponent65537 Nothing testBytes)
    , expectSuccess 6 (encryptWithRsaOaep Crypto.Sha512 Crypto.PublicExponent3 Nothing testBytes)
        --
    , expectSuccess 1 (encryptWithRsaOaep Crypto.Sha256 Crypto.PublicExponent65537 (Just testKeyLabel) testBytes)
    , expectSuccess 2 (encryptWithRsaOaep Crypto.Sha256 Crypto.PublicExponent3 (Just testKeyLabel) testBytes)
    , expectSuccess 3 (encryptWithRsaOaep Crypto.Sha384 Crypto.PublicExponent65537 (Just testKeyLabel) testBytes)
    , expectSuccess 4 (encryptWithRsaOaep Crypto.Sha384 Crypto.PublicExponent3 (Just testKeyLabel) testBytes)
    , expectSuccess 5 (encryptWithRsaOaep Crypto.Sha512 Crypto.PublicExponent65537 (Just testKeyLabel) testBytes)
    , expectSuccess 6 (encryptWithRsaOaep Crypto.Sha512 Crypto.PublicExponent3 (Just testKeyLabel) testBytes)
    ]



-- DECRYPT KEY TESTS


{-|-}
decryptWithRsaOaepTests string func =
    let
        testLabel int modifier =
            string ++ modifier ++ String.fromInt int

        expectSuccess modifier int =
            expectSuccessHelper (testHelper func) (testLabel int modifier)

        expectFailure modifier int =
            expectFailureHelper (testHelper func) (testLabel int modifier)

        testKeyLabel =
            Bytes.Encode.encode (Bytes.Encode.string "test label")

        alternateTestKeyLabel =
            Bytes.Encode.encode (Bytes.Encode.string "test label alternate")
    in
    decryptWithRsaOaepTestsHelper (expectSuccess "both no labels") Nothing Nothing
        ++ decryptWithRsaOaepTestsHelper (expectSuccess "both with labels") (Just testKeyLabel) (Just testKeyLabel)
        ++ decryptWithRsaOaepTestsHelper (expectFailure "encrypt with label, decrypt with nothing") (Just testKeyLabel) Nothing
        ++ decryptWithRsaOaepTestsHelper (expectFailure "encrypt with nothing, decrypt with label") Nothing (Just testKeyLabel)
        ++ decryptWithRsaOaepTestsHelper (expectFailure "encrypt with label, decrypt with different label") (Just testKeyLabel) (Just alternateTestKeyLabel)


{-|-}
decryptWithRsaOaepTestsHelper testFunc encryptionLabel decryptionLabel =
    let
        testBytes =
            Bytes.Encode.encode (Bytes.Encode.string "hi")
    in
    [ testFunc 1 (decryptWithRsaOaep Crypto.Sha256 Crypto.PublicExponent65537 encryptionLabel decryptionLabel testBytes)
    , testFunc 2 (decryptWithRsaOaep Crypto.Sha256 Crypto.PublicExponent3 encryptionLabel decryptionLabel testBytes)
    , testFunc 3 (decryptWithRsaOaep Crypto.Sha384 Crypto.PublicExponent65537 encryptionLabel decryptionLabel testBytes)
    , testFunc 4 (decryptWithRsaOaep Crypto.Sha384 Crypto.PublicExponent3 encryptionLabel decryptionLabel testBytes)
    , testFunc 5 (decryptWithRsaOaep Crypto.Sha512 Crypto.PublicExponent65537 encryptionLabel decryptionLabel testBytes)
    , testFunc 6 (decryptWithRsaOaep Crypto.Sha512 Crypto.PublicExponent3 encryptionLabel decryptionLabel testBytes)
    ]



-- GENERATE KEYS


{-|-}
generateRsaOaepKeyPair hash exponent =
    generateKey
        Crypto.ModulusLengthNotDivisibleByEight
        (\secureContext ->
            Crypto.generateRsaOaepKeyPair
                secureContext
                { modulusLength = 4096
                , hash = hash
                , publicExponent = Crypto.PublicExponent65537
                }
                Crypto.CanBeExtracted
        )


{-|-}
generateRsaPssKeyPair hash exponent =
    generateKey
        Crypto.ModulusLengthNotDivisibleByEight
        (\secureContext ->
            Crypto.generateRsaPssKeyPair
                secureContext
                { modulusLength = 4096
                , hash = hash
                , publicExponent = Crypto.PublicExponent65537
                }
                Crypto.CanBeExtracted
        )


{-|-}
generateRsaSsaPkcs1V1_5KeyPair hash exponent =
    generateKey
        Crypto.ModulusLengthNotDivisibleByEight
        (\secureContext ->
            Crypto.generateRsaSsaPkcs1V1_5KeyPair
                secureContext
                { modulusLength = 4096
                , hash = hash
                , publicExponent = Crypto.PublicExponent65537
                }
                Crypto.CanBeExtracted
        )


{-|-}
generateAesCtrKey aesLength =
    generateKey {} (\secureContext -> Crypto.generateAesCtrKey secureContext aesLength Crypto.CanBeExtracted)


{-|-}
generateAesCbcKey aesLength =
    generateKey {} (\secureContext -> Crypto.generateAesCbcKey secureContext aesLength Crypto.CanBeExtracted)


{-|-}
generateAesGcmKey aesLength =
    generateKey {} (\secureContext -> Crypto.generateAesGcmKey secureContext aesLength Crypto.CanBeExtracted)


{-|-}
generateEcdsaKeyPair curve =
    generateKey {} (\secureContext -> Crypto.generateEcdsaKeyPair secureContext curve Crypto.CanBeExtracted)


{-|-}
generateEcdhKeyPair curve =
    generateKey {} (\secureContext -> Crypto.generateEcdhKeyPair secureContext curve Crypto.CanBeExtracted)


{-|-}
generateHmacKey hash length =
    generateKey
        Crypto.LengthNotDivisibleByEight
        (\secureContext ->
            Crypto.generateHmacKey
                secureContext
                { hash = hash
                , length = length
                }
                Crypto.CanBeExtracted
        )


{-|-}
generateKey errorMap keyGenFunc =
    getSecureContext
        |> Task.mapError (\_ -> errorMap)
        |> Task.andThen
                (\secureContext ->
                    keyGenFunc secureContext
                        |> Task.map
                                (\key ->
                                    { key = key
                                    , secureContext = secureContext
                                    }
                                )
                )



-- EXPORT RSA KEYS


{-|-}
exportRsaOaepPublicKeyAsJwk hash exponent =
    exportRsaOaepKeyPair hash exponent Crypto.exportRsaOaepPublicKeyAsJwk .publicKey


{-|-}
exportRsaOaepPublicKeyAsSpki hash exponent =
    exportRsaOaepKeyPair hash exponent Crypto.exportRsaOaepPublicKeyAsSpki .publicKey


{-|-}
exportRsaOaepPrivateKeyAsJwk hash exponent =
    exportRsaOaepKeyPair hash exponent Crypto.exportRsaOaepPrivateKeyAsJwk .privateKey


{-|-}
exportRsaOaepPrivateKeyAsPkcs8 hash exponent =
    exportRsaOaepKeyPair hash exponent Crypto.exportRsaOaepPrivateKeyAsPkcs8 .privateKey


{-|-}
exportRsaPssPublicKeyAsJwk hash exponent =
    exportRsaPssKeyPair hash exponent Crypto.exportRsaPssPublicKeyAsJwk .publicKey


{-|-}
exportRsaPssPublicKeyAsSpki hash exponent =
    exportRsaPssKeyPair hash exponent Crypto.exportRsaPssPublicKeyAsSpki .publicKey


{-|-}
exportRsaPssPrivateKeyAsJwk hash exponent =
    exportRsaPssKeyPair hash exponent Crypto.exportRsaPssPrivateKeyAsJwk .privateKey


{-|-}
exportRsaPssPrivateKeyAsPkcs8 hash exponent =
    exportRsaPssKeyPair hash exponent Crypto.exportRsaPssPrivateKeyAsPkcs8 .privateKey


{-|-}
exportRsaSsaPkcs1V1_5PublicKeyAsJwk hash exponent =
    exportRsaSsaPkcs1V1_5KeyPair hash exponent Crypto.exportRsaSsaPkcs1V1_5PublicKeyAsJwk .publicKey


{-|-}
exportRsaSsaPkcs1V1_5PublicKeyAsSpki hash exponent =
    exportRsaSsaPkcs1V1_5KeyPair hash exponent Crypto.exportRsaSsaPkcs1V1_5PublicKeyAsSpki .publicKey


{-|-}
exportRsaSsaPkcs1V1_5PrivateKeyAsJwk hash exponent =
    exportRsaSsaPkcs1V1_5KeyPair hash exponent Crypto.exportRsaSsaPkcs1V1_5PrivateKeyAsJwk .privateKey


{-|-}
exportRsaSsaPkcs1V1_5PrivateKeyAsPkcs8 hash exponent =
    exportRsaSsaPkcs1V1_5KeyPair hash exponent Crypto.exportRsaSsaPkcs1V1_5PrivateKeyAsPkcs8 .privateKey


{-|-}
exportRsaOaepKeyPair hash exponent =
    exportKey (generateRsaOaepKeyPair hash exponent)


{-|-}
exportRsaPssKeyPair hash exponent =
    exportKey (generateRsaPssKeyPair hash exponent)


{-|-}
exportRsaSsaPkcs1V1_5KeyPair hash exponent =
    exportKey (generateRsaSsaPkcs1V1_5KeyPair hash exponent)



-- EXPORT EC KEYS


{-|-}
exportEcdsaPrivateKeyAsJwk curve =
    exportEcdsaKeyPair curve Crypto.exportEcdsaPrivateKeyAsJwk .privateKey


{-|-}
exportEcdsaPrivateKeyAsPkcs8 curve =
    exportEcdsaKeyPair curve Crypto.exportEcdsaPrivateKeyAsPkcs8 .privateKey


{-|-}
exportEcdsaPublicKeyAsJwk curve =
    exportEcdsaKeyPair curve Crypto.exportEcdsaPublicKeyAsJwk .publicKey


{-|-}
exportEcdsaPublicKeyAsSpki curve =
    exportEcdsaKeyPair curve Crypto.exportEcdsaPublicKeyAsSpki .publicKey


{-|-}
exportEcdsaPublicKeyAsRaw curve =
    exportEcdsaKeyPair curve Crypto.exportEcdsaPublicKeyAsRaw .publicKey


{-|-}
exportEcdhPrivateKeyAsJwk curve =
    exportEcdhKeyPair curve Crypto.exportEcdhPrivateKeyAsJwk .privateKey


{-|-}
exportEcdhPrivateKeyAsPkcs8 curve =
    exportEcdhKeyPair curve Crypto.exportEcdhPrivateKeyAsPkcs8 .privateKey


{-|-}
exportEcdhPublicKeyAsJwk curve =
    exportEcdhKeyPair curve Crypto.exportEcdhPublicKeyAsJwk .publicKey


{-|-}
exportEcdhPublicKeyAsSpki curve =
    exportEcdhKeyPair curve Crypto.exportEcdhPublicKeyAsSpki .publicKey


{-|-}
exportEcdhPublicKeyAsRaw curve =
    exportEcdhKeyPair curve Crypto.exportEcdhPublicKeyAsRaw .publicKey


{-|-}
exportEcdhKeyPair curve =
    exportKey (generateEcdhKeyPair curve)


{-|-}
exportEcdsaKeyPair curve =
    exportKey (generateEcdsaKeyPair curve)



-- EXPORT HMAC KEYS


{-|-}
exportHmacKeyAsJwk hash length =
    exportHmacKey hash length Crypto.exportHmacKeyAsJwk identity


{-|-}
exportHmacKeyAsRaw hash length =
    exportHmacKey hash length Crypto.exportHmacKeyAsRaw identity


{-|-}
exportHmacKey hash length =
    exportKey (generateHmacKey hash length)



-- EXPORT AES KEYS


{-|-}
exportAesCtrKeyAsJwk aesLength =
    exportAesCtrKey aesLength Crypto.exportAesCtrKeyAsJwk identity


{-|-}
exportAesCtrKeyAsRaw aesLength =
    exportAesCtrKey aesLength Crypto.exportAesCtrKeyAsRaw identity


{-|-}
exportAesCbcKeyAsJwk aesLength =
    exportAesCbcKey aesLength Crypto.exportAesCbcKeyAsJwk identity


{-|-}
exportAesCbcKeyAsRaw aesLength =
    exportAesCbcKey aesLength Crypto.exportAesCbcKeyAsRaw identity


{-|-}
exportAesGcmKeyAsRaw aesLength =
    exportAesGcmKey aesLength Crypto.exportAesGcmKeyAsRaw identity


{-|-}
exportAesGcmKeyAsJwk aesLength =
    exportAesGcmKey aesLength Crypto.exportAesGcmKeyAsJwk identity


{-|-}
exportAesCtrKey aesLength =
    exportKey (generateAesCtrKey aesLength)


{-|-}
exportAesCbcKey aesLength =
    exportKey (generateAesCbcKey aesLength)


{-|-}
exportAesGcmKey aesLength =
    exportKey (generateAesGcmKey aesLength)



-- EXPORT KEY UTILS


{-|-}
exportKey keyGenFunc exportKeyFunc keyFunc =
    keyGenFunc
        |> Task.mapError (\_ -> Crypto.KeyNotExportable)
        |> Task.andThen
                (\{ key, secureContext } ->
                    exportKeyFunc secureContext (keyFunc key)
                        |> Task.map
                                (\exportedKey ->
                                    { key = key
                                    , exportedKey = exportedKey
                                    , secureContext = secureContext
                                    }
                                )
                )



-- IMPORT RSA-OAEP KEYS


{-|-}
importRsaOaepPublicKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPublicKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPublicKeyFromJwk
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPublicKeyFromSpki keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPublicKeyAsSpki keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPublicKeyFromSpki
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPrivateKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPrivateKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPrivateKeyFromJwk
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPrivateKeyFromPkcs8 keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPrivateKeyAsPkcs8 keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPrivateKeyFromPkcs8
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPublicKeyFromJwkWithArbitraryJson keyHash keyExponent importHash json =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPublicKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPublicKeyFromJwk
                secureContext
                json
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPublicKeyFromSpkiWithArbitraryBytes keyHash keyExponent importHash bytes =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPublicKeyAsSpki keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaOaepPublicKeyFromSpki
                secureContext
                bytes
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )



-- IMPORT RSA-PSS KEYS


{-|-}
importRsaPssPublicKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaPssPublicKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaPssPublicKeyFromJwk
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaPssPublicKeyFromSpki keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaPssPublicKeyAsSpki keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaPssPublicKeyFromSpki
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaPssPrivateKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaPssPrivateKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaPssPrivateKeyFromJwk
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaPssPrivateKeyFromPkcs8 keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaPssPrivateKeyAsPkcs8 keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaPssPrivateKeyFromPkcs8
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )



-- IMPORT RSA-SSA-PKCS1V1.5K KEYS


{-|-}
importRsaSsaPkcs1V1_5PublicKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaSsaPkcs1V1_5PrivateKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaSsaPkcs1V1_5PublicKeyFromJwk
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaSsaPkcs1V1_5PublicKeyFromSpki keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaSsaPkcs1V1_5PublicKeyAsSpki keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaSsaPkcs1V1_5PublicKeyFromSpki
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaSsaPkcs1V1_5PrivateKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaSsaPkcs1V1_5PrivateKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaSsaPkcs1V1_5PrivateKeyFromJwk
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )


{-|-}
importRsaSsaPkcs1V1_5PrivateKeyFromPkcs8 keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaSsaPkcs1V1_5PrivateKeyAsPkcs8 keyHash keyExponent)
        (\{ secureContext, exportedKey } ->
            Crypto.importRsaSsaPkcs1V1_5PrivateKeyFromPkcs8
                secureContext
                exportedKey
                { hash = importHash
                }
                Crypto.CanBeExtracted
        )



-- IMPORT AES KEYS


{-|-}
importAesCtrKeyFromJwk aesLength =
    importKey Crypto.ImportAesKeyError (exportAesCtrKeyAsJwk aesLength) (\{ secureContext, exportedKey } -> Crypto.importAesCtrKeyFromJwk secureContext exportedKey Crypto.CanBeExtracted)


{-|-}
importAesCtrKeyFromRaw aesLength =
    importKey Crypto.ImportAesKeyError (exportAesCtrKeyAsRaw aesLength) (\{ secureContext, exportedKey } -> Crypto.importAesCtrKeyFromRaw secureContext exportedKey Crypto.CanBeExtracted)


{-|-}
importAesCbcKeyFromJwk aesLength =
    importKey Crypto.ImportAesKeyError (exportAesCbcKeyAsJwk aesLength) (\{ secureContext, exportedKey } -> Crypto.importAesCbcKeyFromJwk secureContext exportedKey Crypto.CanBeExtracted)


{-|-}
importAesCbcKeyFromRaw aesLength =
    importKey Crypto.ImportAesKeyError (exportAesCbcKeyAsRaw aesLength) (\{ secureContext, exportedKey } -> Crypto.importAesCbcKeyFromRaw secureContext exportedKey Crypto.CanBeExtracted)


{-|-}
importAesGcmKeyFromJwk aesLength =
    importKey Crypto.ImportAesKeyError (exportAesGcmKeyAsJwk aesLength) (\{ secureContext, exportedKey } -> Crypto.importAesGcmKeyFromJwk secureContext exportedKey Crypto.CanBeExtracted)


{-|-}
importAesGcmKeyFromRaw aesLength =
    importKey Crypto.ImportAesKeyError (exportAesGcmKeyAsRaw aesLength) (\{ secureContext, exportedKey } -> Crypto.importAesGcmKeyFromRaw secureContext exportedKey Crypto.CanBeExtracted)



-- IMPORT ECD KEYS


{-|-}
importEcdsaPublicKeyFromJwk exportNamedCurve importNamedCurve key =
    importKey Crypto.ImportEcKeyError (exportEcdsaPublicKeyAsJwk exportNamedCurve) (\{ secureContext, exportedKey } -> Crypto.importEcdsaPublicKeyFromJwk secureContext importNamedCurve (key exportedKey) Crypto.CanBeExtracted)


{-|-}
importEcdsaPublicKeyFromRaw exportNamedCurve importNamedCurve key =
    importKey Crypto.ImportEcKeyError (exportEcdsaPublicKeyAsRaw exportNamedCurve) (\{ secureContext, exportedKey } -> Crypto.importEcdsaPublicKeyFromRaw secureContext importNamedCurve (key exportedKey) Crypto.CanBeExtracted)


{-|-}
importEcdsaPublicKeyFromSpki exportNamedCurve importNamedCurve key =
    importKey Crypto.ImportEcKeyError (exportEcdsaPublicKeyAsSpki exportNamedCurve) (\{ secureContext, exportedKey } -> Crypto.importEcdsaPublicKeyFromSpki secureContext importNamedCurve (key exportedKey) Crypto.CanBeExtracted)


{-|-}
importEcdsaPrivateKeyFromJwk exportNamedCurve importNamedCurve key =
    importKey Crypto.ImportEcKeyError (exportEcdsaPrivateKeyAsJwk exportNamedCurve) (\{ secureContext, exportedKey } -> Crypto.importEcdsaPrivateKeyFromJwk secureContext importNamedCurve (key exportedKey) Crypto.CanBeExtracted)


{-|-}
importEcdsaPrivateKeyFromPkcs8 exportNamedCurve importNamedCurve key =
    importKey Crypto.ImportEcKeyError (exportEcdsaPrivateKeyAsPkcs8 exportNamedCurve) (\{ secureContext, exportedKey } -> Crypto.importEcdsaPrivateKeyFromPkcs8 secureContext importNamedCurve (key exportedKey) Crypto.CanBeExtracted)


{-|-}
importEcdhPublicKeyFromJwk exportNamedCurve importNamedCurve key =
    importKey Crypto.ImportEcKeyError (exportEcdhPublicKeyAsJwk exportNamedCurve) (\{ secureContext, exportedKey } -> Crypto.importEcdhPublicKeyFromJwk secureContext importNamedCurve (key exportedKey) Crypto.CanBeExtracted)


{-|-}
importEcdhPublicKeyFromRaw exportNamedCurve importNamedCurve key =
    -- Debug.todo ""
    importKey Crypto.ImportEcKeyError (exportEcdhPublicKeyAsRaw exportNamedCurve) (\{ secureContext, exportedKey } -> Crypto.importEcdhPublicKeyFromRaw secureContext importNamedCurve (key exportedKey) Crypto.CanBeExtracted)


{-|-}
importEcdhPublicKeyFromSpki exportNamedCurve importNamedCurve key =
    importKey Crypto.ImportEcKeyError (exportEcdhPublicKeyAsSpki exportNamedCurve) (\{ secureContext, exportedKey } -> Crypto.importEcdhPublicKeyFromSpki secureContext importNamedCurve (key exportedKey) Crypto.CanBeExtracted)


{-|-}
importEcdhPrivateKeyFromJwk exportNamedCurve importNamedCurve key =
    importKey Crypto.ImportEcKeyError (exportEcdhPrivateKeyAsJwk exportNamedCurve) (\{ secureContext, exportedKey } -> Crypto.importEcdhPrivateKeyFromJwk secureContext importNamedCurve (key exportedKey) Crypto.CanBeExtracted)


{-|-}
importEcdhPrivateKeyFromPkcs8 exportNamedCurve importNamedCurve key =
    importKey Crypto.ImportEcKeyError (exportEcdhPrivateKeyAsPkcs8 exportNamedCurve) (\{ secureContext, exportedKey } -> Crypto.importEcdhPrivateKeyFromPkcs8 secureContext importNamedCurve (key exportedKey) Crypto.CanBeExtracted)



-- IMPORT HMAC KEYS


{-|-}
importHmacKeyFromJwk keyHash keyExponent importHash importLength =
    importKey Crypto.ImportHmacKeyError (exportHmacKeyAsJwk keyHash keyExponent) (\{ secureContext, exportedKey } -> Crypto.importHmacKeyFromJwk secureContext exportedKey importHash importLength Crypto.CanBeExtracted)


{-|-}
importHmacKeyFromRaw keyHash keyExponent importHash importLength =
    importKey Crypto.ImportHmacKeyError (exportHmacKeyAsRaw keyHash keyExponent) (\{ secureContext, exportedKey } -> Crypto.importHmacKeyFromRaw secureContext exportedKey importHash importLength Crypto.CanBeExtracted)



-- IMPORT KEY UTILS


{-|-}
importKey errorMap exportFunc importFunc =
    exportFunc
        |> Task.mapError (\_ -> errorMap)
        |> Task.andThen
                (\data ->
                    importFunc data
                        |> Task.map
                                (\importedKey ->
                                    { key = data.key
                                    , secureContext = data.secureContext
                                    , exportedKey = data.exportedKey
                                    , importedKey = importedKey
                                    }
                                )
                )



-- DERIVE HMAC KEY


{-|-}
deriveHmacKeyUsingEcdh publicKeyCurve privateKeyCurve keyHash length =
    generateEcdhKeyPair publicKeyCurve
        |> Task.mapError (\_ -> Crypto.DeriveHmacKeyUnknownError)
        |> Task.andThen (\firstEcdhKey ->
            generateEcdhKeyPair privateKeyCurve
                |> Task.mapError (\_ -> Crypto.DeriveHmacKeyUnknownError)
                |> Task.andThen (\secondEcdhKey ->
                    Crypto.deriveHmacKeyUsingEcdh
                        { hash = keyHash
                        , length = length
                        }
                        firstEcdhKey.key.publicKey
                        secondEcdhKey.key.privateKey
                        Crypto.CanBeExtracted
                )
        )



-- ENCRYPT


{-|-}
encryptWithRsaOaep keyHash keyExponent label bytes =
    generateRsaOaepKeyPair keyHash keyExponent
        |> Task.mapError (\_ -> {})
        |> Task.andThen (\{ key } ->
            Crypto.encryptWithRsaOaep label key.publicKey bytes
        )



-- DECRYPT


{-|-}
decryptWithRsaOaep keyHash keyExponent encryptionLabel decryptionLabel bytes =
    generateRsaOaepKeyPair keyHash keyExponent
        |> Task.mapError (\_ -> Crypto.DecryptWithRsaOaepError)
        |> Task.andThen (\{ key } ->
            Crypto.encryptWithRsaOaep encryptionLabel key.publicKey bytes
                |> Task.mapError (\_ -> Crypto.DecryptWithRsaOaepError)
                |> Task.andThen (\encryptedBytes ->
                    Crypto.decryptWithRsaOaep decryptionLabel key.privateKey encryptedBytes
                )
        )



-- UTILITIES


{-|-}
successString id =
    "✓ - " ++ id


{-|-}
failureString id =
    "x - " ++ id


{-|-}
expectSuccessHelper test id =
    test (successString id) (failureString id)


{-|-}
expectFailureHelper test id =
    test (failureString id) (successString id)


{-|-}
testHelper : (String -> msg) -> String -> String -> Task a b -> Cmd msg
testHelper mapFunc onSuccess onFailure =
    Task.attempt (
        Result.map (\_ -> mapFunc onSuccess)
            >> Result.withDefault (mapFunc onFailure)
    )
