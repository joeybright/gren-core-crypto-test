module Tests exposing (..)

{-|-}

import Bytes.Encode
import Crypto
import Json.Encode
import Task exposing ( Task )


{-|-}
count : Int
count =
    tests (\_ -> {})
        |> Array.length


{-| All of the tests in this module.
-}
tests : (String -> msg) -> Array (Cmd msg)
tests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task
    in
    [ test getSecureContext "✓ - Got a secure context" "x - Problem getting secure context"
    ]
        ++ rsaTests func
        ++ randomValueTests func
        ++ uuidTests func



-- Secure context


{-|-}
getSecureContext : Task {} Crypto.SecureContext
getSecureContext =
    Crypto.isSecureContext



-- Random values


randomValueTests : (String -> msg) -> Array (Cmd msg)
randomValueTests func =
    let
        maxInt8Values =
            65536

        maxInt16Values =
            32768

        maxInt32Values =
            16384

        testGeneratedValueCount num success failure res =
            if Array.length res == num then
                func success
            else
                func failure
    in
    [ Task.perform (\res -> func "✓ - Generated random int8 values") (Crypto.getRandomInt8Values 3)
    , Task.perform (testGeneratedValueCount maxInt8Values "✓ - Generates max int8 random values" "x - Generates too many values") (Crypto.getRandomInt8Values 99999)
    , Task.perform (testGeneratedValueCount 0 "✓ - Generates no fewer than 0 int8 values" "x - Doesn\'t generate 0 int8 values when given a negative number") (Crypto.getRandomInt8Values -99999)
        -- 
    , Task.perform (\res -> func "✓ - Generated random uint8 values") (Crypto.getRandomUInt8Values 3)
    , Task.perform (testGeneratedValueCount maxInt8Values "✓ - Generates max uint8 random values" "x - Generates too many uint8 values") (Crypto.getRandomUInt8Values 99999)
    , Task.perform (testGeneratedValueCount 0 "✓ - Generates no fewer than 0 uint8 values" "x - Doesn\'t generate 0 uint8 values when given a negative number") (Crypto.getRandomUInt8Values -99999)
        -- 
    , Task.perform (\res -> func "✓ - Generated random int16 values") (Crypto.getRandomInt16Values 3)
    , Task.perform (testGeneratedValueCount maxInt16Values "✓ - Generates max int16 random values" "x - Generates too many uint16 values") (Crypto.getRandomInt16Values 99999)
    , Task.perform (testGeneratedValueCount 0 "✓ - Generates no fewer than 0 int16 values" "x - Doesn\'t generate 0 uint8 values when given a negative number") (Crypto.getRandomInt16Values -99999)
        -- 
    , Task.perform (\res -> func "✓ - Generated random uint16 values") (Crypto.getRandomUInt16Values 3)
    , Task.perform (testGeneratedValueCount maxInt16Values "✓ - Generates max uint16 random values" "x - Generates too many uint16 values") (Crypto.getRandomUInt16Values 99999)
    , Task.perform (testGeneratedValueCount 0 "✓ - Generates no fewer than 0 uint16 values" "x - Doesn\'t generate 0 uint8 values when given a negative number") (Crypto.getRandomUInt16Values -99999)
        -- 
    , Task.perform (\res -> func "✓ - Generated random int32 values") (Crypto.getRandomInt32Values 3)
    , Task.perform (testGeneratedValueCount maxInt32Values "✓ - Generates max int32 random values" "x - Generates too many int32 values") (Crypto.getRandomInt32Values 99999)
    , Task.perform (testGeneratedValueCount 0 "✓ - Generates no fewer than 0 int32 values" "x - Doesn\'t generate 0 int32 values when given a negative number") (Crypto.getRandomInt32Values -99999)
        -- 
    , Task.perform (\res -> func "✓ - Generated random uint32 values") (Crypto.getRandomUInt32Values 3)
    , Task.perform (testGeneratedValueCount maxInt32Values "✓ - Generates max uint32 random values" "x - Generates too many uint32 values") (Crypto.getRandomUInt32Values 99999)
    , Task.perform (testGeneratedValueCount 0 "✓ - Generates no fewer than 0 uint32 values" "x - Doesn\'t generate 0 uint32 values when given a negative number") (Crypto.getRandomUInt32Values -99999)
    ]



-- UUID generation


uuidTests : (String -> msg) -> Array (Cmd msg)
uuidTests func =
    [ getSecureContext
        |> Task.andThen (\secureContext -> Crypto.randomUuid secureContext)
        |> Task.attempt (\_ -> func "✓ - Generated random uuid")
    ]



-- RSA algorithm


{-|-}
rsaTests : (String -> msg) -> Array (Cmd msg)
rsaTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        generate =
            [ test (generateRsaOaepKeyPair Crypto.Sha256 Crypto.PublicExponent65537) "✓ - Generated RSA-OAEP key with SHA-256 and 65537 exponent" "x - Problem generating RSA-OAEP key"
            , test (generateRsaOaepKeyPair Crypto.Sha256 Crypto.PublicExponent3) "✓ - Generated RSA-OAEP key with SHA-256 and 3 exponent" "x - Problem generating RSA-OAEP key"
            , test (generateRsaOaepKeyPair Crypto.Sha384 Crypto.PublicExponent65537) "✓ - Generated RSA-OAEP key with SHA-384 and 65537 exponent" "x - Problem generating RSA-OAEP key"
            , test (generateRsaOaepKeyPair Crypto.Sha384 Crypto.PublicExponent3) "✓ - Generated RSA-OAEP key with SHA-384 and 3 exponent" "x - Problem generating RSA-OAEP key"
            , test (generateRsaOaepKeyPair Crypto.Sha512 Crypto.PublicExponent65537) "✓ - Generated RSA-OAEP key with SHA-512 and 65537 exponent" "x - Problem generating RSA-OAEP key"
            , test (generateRsaOaepKeyPair Crypto.Sha512 Crypto.PublicExponent3) "✓ - Generated RSA-OAEP key with SHA-512 and 3 exponent" "x - Problem generating RSA-OAEP key"
            ]

        -- RsaPssPublicKey
        -- exportRsaPssPublicKeyAsSpki
        -- importRsaPssPublicKeyFromSpki
        -- exportRsaPssPublicKeyAsJwk
        -- importRsaPssPublicKeyFromJwk
        -- 
        -- RsaPssPrivateKey
        -- exportRsaPssPrivateKeyAsPkcs8
        -- importRsaPssPrivateKeyFromPkcs8
        -- exportRsaPssPrivateKeyAsJwk
        -- importRsaPssPrivateKeyFromJwk
        -- 
        -- RsaSsaPkcs1V1_5PublicKey
        -- exportRsaSsaPkcs1V1_5PublicKeyAsSpki
        -- importRsaSsaPkcs1V1_5PublicKeyFromSpki
        -- exportRsaSsaPkcs1V1_5PublicKeyAsJwk
        -- importRsaSsaPkcs1V1_5PublicKeyFromJwk
        -- 
        -- RsaSsaPkcs1V1_5PrivateKey
        -- exportRsaSsaPkcs1V1_5PrivateKeyAsPkcs8
        -- importRsaSsaPkcs1V1_5PrivateKeyFromPkcs8
        -- exportRsaSsaPkcs1V1_5PrivateKeyAsJwk
        -- importRsaSsaPkcs1V1_5PrivateKeyFromJwk
    in
    generate ++ rsaOaepPublicKeyTests func ++ rsaOaepPrivateKeyTests func


{-|-}
rsaOaepPublicKeyTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task

        exportAsJwk =
            [ test (exportRsaOaepPublicKeyAsJwk Crypto.Sha256 Crypto.PublicExponent65537) "✓ - Exported RSA-OAEP public key with SHA-256 hash and 65537 exponent as jwk" "x - Problem exporting RSA-OAEP public key as jwk"
            , test (exportRsaOaepPublicKeyAsJwk Crypto.Sha256 Crypto.PublicExponent3) "✓ - Exported RSA-OAEP public key with SHA-256 hash and 3 exponent as jwk" "x - Problem exporting RSA-OAEP public key as jwk"
            , test (exportRsaOaepPublicKeyAsJwk Crypto.Sha384 Crypto.PublicExponent65537) "✓ - Exported RSA-OAEP public key with SHA-384 hash and 65537 exponent as jwk" "x - Problem exporting RSA-OAEP public key as jwk"
            , test (exportRsaOaepPublicKeyAsJwk Crypto.Sha384 Crypto.PublicExponent3) "✓ - Exported RSA-OAEP public key with SHA-384 hash and 3 exponent as jwk" "x - Problem exporting RSA-OAEP public key as jwk"
            , test (exportRsaOaepPublicKeyAsJwk Crypto.Sha512 Crypto.PublicExponent65537) "✓ - Exported RSA-OAEP public key with SHA-512 hash and 65537 exponent as jwk" "x - Problem exporting RSA-OAEP public key as jwk"
            , test (exportRsaOaepPublicKeyAsJwk Crypto.Sha512 Crypto.PublicExponent3) "✓ - Exported RSA-OAEP public key with SHA-512 hash and 3 exponent as jwk" "x - Problem exporting RSA-OAEP public key as jwk"
            ]

        importFromJwk =
            [ test (importRsaOaepPublicKeyFromJwk Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha256) "✓ - Imported RSA-OAEP key with SHA-256 hash and 65537 exponent from jwk with matching hash" "x - Problem import RSA-OAEP public key from jwk"
            , test (importRsaOaepPublicKeyFromJwk Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha256) "✓ - Imported RSA-OAEP key with SHA-256 hash and 3 exponent from jwk with matching hash" "x - Problem import RSA-OAEP public key from jwk"
            , test (importRsaOaepPublicKeyFromJwk Crypto.Sha384 Crypto.PublicExponent65537 Crypto.Sha384) "✓ - Imported RSA-OAEP key with SHA-384 hash and 65537 exponent from jwk with matching hash" "x - Problem import RSA-OAEP public key from jwk"
            , test (importRsaOaepPublicKeyFromJwk Crypto.Sha384 Crypto.PublicExponent3 Crypto.Sha384) "✓ - Imported RSA-OAEP key with SHA-384 hash and 3 exponent from jwk with matching hash" "x - Problem import RSA-OAEP public key from jwk"
            , test (importRsaOaepPublicKeyFromJwk Crypto.Sha512 Crypto.PublicExponent65537 Crypto.Sha512) "✓ - Imported RSA-OAEP key with SHA-512 hash and 65537 exponent from jwk with matching hash" "x - Problem import RSA-OAEP public key from jwk"
            , test (importRsaOaepPublicKeyFromJwk Crypto.Sha512 Crypto.PublicExponent3 Crypto.Sha512) "✓ - Imported RSA-OAEP key with SHA-512 hash and 3 exponent from jwk with matching hash" "x - Problem import RSA-OAEP public key from jwk"
            ]

        importFromJwkFailures =
            [ test (importRsaOaepPublicKeyFromJwk Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha384) "x - Imported RSA-OAEP public key from a jwk with hash mismatch and 65537 exponent" "✓ - Import failed expectantly for RSA-OAEP public key from jwk with hash mismatch"
            , test (importRsaOaepPublicKeyFromJwk Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha384) "x - Imported RSA-OAEP public key from jwk even with hash mismatch and 3 exponent" "✓ - Import failed expectantly for RSA-OAEP public key from jwk with hash mismatch"
            , test (importRsaOaepPublicKeyFromJwk Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha512) "x - Imported RSA-OAEP public key from jwk even with hash mismatch and 65537 exponent" "✓ - Import failed expectantly for RSA-OAEP public key from jwk with hash mismatch"
            , test (importRsaOaepPublicKeyFromJwk Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha512) "x - Imported RSA-OAEP public key from jwk even with hash mismatch and 3 exponent" "✓ - Import failed expectantly for RSA-OAEP public key from jwk with hash mismatch"
            , test
                (importRsaOaepPublicKeyFromJwkWithArbitraryJson
                    (Json.Encode.object
                        [ { key = "test"
                          , value = Json.Encode.string "test"
                          }
                        ]
                    )
                )
                "x - Somehow imported RSA-OAEP public key with incorrect JSON"
                "✓ - Appropriately failed importing a key with incorrect JSON"
            ]

        exportAsSpki =
            [ test (exportRsaOaepPublicKeyAsSpki Crypto.Sha256 Crypto.PublicExponent65537) "✓ - Exported RSA-OAEP public key with SHA-256 hash and 65537 exponent as spki" "x - Problem exporting RSA-OAEP public key as spki"
            , test (exportRsaOaepPublicKeyAsSpki Crypto.Sha256 Crypto.PublicExponent3) "✓ - Exported RSA-OAEP public key with SHA-256 hash and 3 exponent as spki" "x - Problem exporting RSA-OAEP public key as spki"
            , test (exportRsaOaepPublicKeyAsSpki Crypto.Sha384 Crypto.PublicExponent65537) "✓ - Exported RSA-OAEP public key with SHA-384 hash and 65537 exponent as spki" "x - Problem exporting RSA-OAEP public key as spki"
            , test (exportRsaOaepPublicKeyAsSpki Crypto.Sha384 Crypto.PublicExponent3) "✓ - Exported RSA-OAEP public key with SHA-384 hash and 3 exponent as spki" "x - Problem exporting RSA-OAEP public key as spki"
            , test (exportRsaOaepPublicKeyAsSpki Crypto.Sha512 Crypto.PublicExponent65537) "✓ - Exported RSA-OAEP public key with SHA-512 hash and 65537 exponent as spki" "x - Problem exporting RSA-OAEP public key as spki"
            , test (exportRsaOaepPublicKeyAsSpki Crypto.Sha512 Crypto.PublicExponent3) "✓ - Exported RSA-OAEP public key with SHA-512 hash and 3 exponent as spki" "x - Problem exporting RSA-OAEP public key as spki"
            , test (importRsaOaepPublicKeyFromSpki Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha384) "✓ - Imported RSA-OAEP public key from a spki even with hash mismatch" "x - Import failed for RSA-OAEP public key from spki with hash mismatch"
            ]

        importFromSpki =
            [ test (importRsaOaepPublicKeyFromSpki Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha256) "✓ - Imported RSA-OAEP key with SHA-256 hash and 65537 exponent from spki with matching hash" "x - Problem import RSA-OAEP public key from spki"
            , test (importRsaOaepPublicKeyFromSpki Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha256) "✓ - Imported RSA-OAEP key with SHA-256 hash and 3 exponent from spki with matching hash" "x - Problem import RSA-OAEP public key from spki"
            , test (importRsaOaepPublicKeyFromSpki Crypto.Sha384 Crypto.PublicExponent65537 Crypto.Sha384) "✓ - Imported RSA-OAEP key with SHA-384 hash and 65537 exponent from spki with matching hash" "x - Problem import RSA-OAEP public key from spki"
            , test (importRsaOaepPublicKeyFromSpki Crypto.Sha384 Crypto.PublicExponent3 Crypto.Sha384) "✓ - Imported RSA-OAEP key with SHA-384 hash and 3 exponent from spki with matching hash" "x - Problem import RSA-OAEP public key from spki"
            , test (importRsaOaepPublicKeyFromSpki Crypto.Sha512 Crypto.PublicExponent65537 Crypto.Sha512) "✓ - Imported RSA-OAEP key with SHA-512 hash and 65537 exponent from spki with matching hash" "x - Problem import RSA-OAEP public key from spki"
            , test (importRsaOaepPublicKeyFromSpki Crypto.Sha512 Crypto.PublicExponent3 Crypto.Sha512) "✓ - Imported RSA-OAEP key with SHA-512 hash and 3 exponent from spki with matching hash" "x - Problem import RSA-OAEP public key from spki"
            ]

        importFromSpkiFailures =
            [ test (importRsaOaepPublicKeyFromSpkiWithArbitraryBytes (Bytes.Encode.encode (Bytes.Encode.string "hello"))) "x - Somehow imported RSA-OAEP public key using spki with incorrect Bytes" "✓ - Appropriately failed importing a RSA-OAEP spki key with incorrect bytes"
            ]
    in
    exportAsJwk ++ importFromJwk ++ importFromJwkFailures ++ exportAsSpki ++ importFromSpki ++ importFromSpkiFailures


{-|-}
rsaOaepPrivateKeyTests func =
    let
        test task success failure =
            Task.attempt (testHelper func success failure) task
            
        testId int =
            "RSA-OAEP private key - " ++ String.fromInt int

        successString id =
            "✓ - " ++ id

        failureString id =
            "x - " ++ id

        expectSuccess id task =
            test task (successString id) (failureString id)

        expectFailure id task =
            test task (failureString id) (successString id)

        exportAsJwk =
            [ expectSuccess (testId 1) (exportRsaOaepPrivateKeyAsJwk Crypto.Sha256 Crypto.PublicExponent3)
            , expectSuccess (testId 2) (exportRsaOaepPrivateKeyAsJwk Crypto.Sha384 Crypto.PublicExponent3)
            , expectSuccess (testId 3) (exportRsaOaepPrivateKeyAsJwk Crypto.Sha512 Crypto.PublicExponent3)
            , expectSuccess (testId 4) (exportRsaOaepPrivateKeyAsJwk Crypto.Sha256 Crypto.PublicExponent65537)
            , expectSuccess (testId 5) (exportRsaOaepPrivateKeyAsJwk Crypto.Sha384 Crypto.PublicExponent65537)
            , expectSuccess (testId 6) (exportRsaOaepPrivateKeyAsJwk Crypto.Sha512 Crypto.PublicExponent65537)
            ]

        exportAsPkcs8 =
            [ expectSuccess (testId 7) (exportRsaOaepPrivateKeyAsPkcs8 Crypto.Sha256 Crypto.PublicExponent3)
            , expectSuccess (testId 8) (exportRsaOaepPrivateKeyAsPkcs8 Crypto.Sha384 Crypto.PublicExponent3)
            , expectSuccess (testId 9) (exportRsaOaepPrivateKeyAsPkcs8 Crypto.Sha512 Crypto.PublicExponent3)
            , expectSuccess (testId 10) (exportRsaOaepPrivateKeyAsPkcs8 Crypto.Sha256 Crypto.PublicExponent65537)
            , expectSuccess (testId 11) (exportRsaOaepPrivateKeyAsPkcs8 Crypto.Sha384 Crypto.PublicExponent65537)
            , expectSuccess (testId 12) (exportRsaOaepPrivateKeyAsPkcs8 Crypto.Sha512 Crypto.PublicExponent65537)
            ]
        
        importFromJwk =
            [ expectSuccess (testId 13) (importRsaOaepPrivateKeyFromJwk Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha256)
            , expectSuccess (testId 14) (importRsaOaepPrivateKeyFromJwk Crypto.Sha384 Crypto.PublicExponent3 Crypto.Sha384)
            , expectSuccess (testId 15) (importRsaOaepPrivateKeyFromJwk Crypto.Sha512 Crypto.PublicExponent3 Crypto.Sha512)
            , expectSuccess (testId 16) (importRsaOaepPrivateKeyFromJwk Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha256)
            , expectSuccess (testId 17) (importRsaOaepPrivateKeyFromJwk Crypto.Sha384 Crypto.PublicExponent65537 Crypto.Sha384)
            , expectSuccess (testId 19) (importRsaOaepPrivateKeyFromJwk Crypto.Sha512 Crypto.PublicExponent65537 Crypto.Sha512)
            -- Failure because of mismatched hash of created key and import
            , expectFailure (testId 26) (importRsaOaepPrivateKeyFromJwk Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha512)
            ]

        importFromPkcs8 =
            [ expectSuccess (testId 20) (importRsaOaepPrivateKeyFromPkcs8 Crypto.Sha256 Crypto.PublicExponent3 Crypto.Sha256)
            , expectSuccess (testId 21) (importRsaOaepPrivateKeyFromPkcs8 Crypto.Sha384 Crypto.PublicExponent3 Crypto.Sha384)
            , expectSuccess (testId 22) (importRsaOaepPrivateKeyFromPkcs8 Crypto.Sha512 Crypto.PublicExponent3 Crypto.Sha512)
            , expectSuccess (testId 23) (importRsaOaepPrivateKeyFromPkcs8 Crypto.Sha256 Crypto.PublicExponent65537 Crypto.Sha256)
            , expectSuccess (testId 24) (importRsaOaepPrivateKeyFromPkcs8 Crypto.Sha384 Crypto.PublicExponent65537 Crypto.Sha384)
            , expectSuccess (testId 25) (importRsaOaepPrivateKeyFromPkcs8 Crypto.Sha512 Crypto.PublicExponent65537 Crypto.Sha512)
            -- Below succeeds even though mismatched hash of created key vs. import
            , expectSuccess (testId 27) (importRsaOaepPrivateKeyFromPkcs8 Crypto.Sha512 Crypto.PublicExponent65537 Crypto.Sha256)
            ]
    in
    exportAsJwk ++ exportAsPkcs8 ++ importFromJwk ++ importFromPkcs8


-- GENERATE KEYS


{-|-}
generateRsaOaepKeyPair hash exponent =
    generateKey
        Crypto.ModulusLengthNotDivisibleByEight
        (\secureContext -> 
            Crypto.generateRsaOaepKeyPair
                secureContext
                { modulusLength = 4096
                , hash = hash
                , publicExponent = Crypto.PublicExponent65537
                }
                Crypto.CanBeExtracted
        )


{-|-}
generateRsaPssKeyPair hash exponent =
    generateKey
        Crypto.ModulusLengthNotDivisibleByEight
        (\secureContext ->
            Crypto.generateRsaPssKeyPair
                secureContext
                { modulusLength = 4096
                , hash = hash
                , publicExponent = Crypto.PublicExponent65537
                }
                Crypto.CanBeExtracted
        )


{-|-}
generateRsaSsaPkcs1V1_5KeyPair hash exponent =
    generateKey
        Crypto.ModulusLengthNotDivisibleByEight
        (\secureContext ->
            Crypto.generateRsaSsaPkcs1V1_5KeyPair
                secureContext
                { modulusLength = 4096
                , hash = hash
                , publicExponent = Crypto.PublicExponent65537
                }
                Crypto.CanBeExtracted
        )
        

{-|-}
generateKey errorMap keyGenFunc =
    getSecureContext
        |> Task.mapError (\_ -> errorMap)
        |> Task.andThen
                (\secureContext ->
                    keyGenFunc secureContext
                        |> Task.map
                                (\key ->
                                    { key = key
                                    , secureContext = secureContext
                                    }
                                )
                )


-- EXPORT KEYS


{-|-}
exportRsaOaepPublicKeyAsJwk hash exponent =
    (exportRsaOaepKeyPair hash exponent)
        Crypto.exportRsaOaepPublicKeyAsJwk
        .publicKey


{-|-}
exportRsaOaepPublicKeyAsSpki hash exponent =
    (exportRsaOaepKeyPair hash exponent)
        Crypto.exportRsaOaepPublicKeyAsSpki
        .publicKey


{-|-}
exportRsaOaepPrivateKeyAsJwk hash exponent =
    (exportRsaOaepKeyPair hash exponent)
        Crypto.exportRsaOaepPrivateKeyAsJwk
        .privateKey


{-|-}
exportRsaOaepPrivateKeyAsPkcs8 hash exponent =
    (exportRsaOaepKeyPair hash exponent)
        Crypto.exportRsaOaepPrivateKeyAsPkcs8
        .privateKey


{-|-}
exportRsaOaepKeyPair hash exponent =
    exportKey (generateRsaOaepKeyPair hash exponent)


{-|-}
exportKey keyGenFunc exportKeyFunc keyFunc =
    keyGenFunc
        |> Task.mapError (\_ -> Crypto.KeyNotExportable)
        |> Task.andThen
                (\{ key, secureContext } ->
                    exportKeyFunc secureContext (keyFunc key)
                        |> Task.map
                                (\exportedKey ->
                                    { key = key
                                    , exportedKey = exportedKey
                                    , secureContext = secureContext
                                    }
                                )
                )


-- IMPORT KEYS


{-|-}
importRsaOaepPublicKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPublicKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } -> 
            Crypto.importRsaOaepPublicKeyFromJwk 
                secureContext 
                exportedKey 
                { hash = importHash 
                } 
                Crypto.CanBeExtracted
        )

{-|-}
importRsaOaepPublicKeyFromSpki keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPublicKeyAsSpki keyHash keyExponent)
        (\{ secureContext, exportedKey } -> 
            Crypto.importRsaOaepPublicKeyFromSpki 
                secureContext 
                exportedKey 
                { hash = importHash 
                } 
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPrivateKeyFromJwk keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPrivateKeyAsJwk keyHash keyExponent)
        (\{ secureContext, exportedKey } -> 
            Crypto.importRsaOaepPrivateKeyFromJwk
                secureContext 
                exportedKey 
                { hash = importHash 
                } 
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPrivateKeyFromPkcs8 keyHash keyExponent importHash =
    importKey
        Crypto.ImportRsaKeyError
        (exportRsaOaepPrivateKeyAsPkcs8 keyHash keyExponent)
        (\{ secureContext, exportedKey } -> 
            Crypto.importRsaOaepPrivateKeyFromPkcs8
                secureContext 
                exportedKey 
                { hash = importHash 
                } 
                Crypto.CanBeExtracted
        )


{-|-}
importRsaOaepPublicKeyFromJwkWithArbitraryJson json =
    getSecureContext
        |> Task.mapError (\_ -> Crypto.ImportRsaKeyError)
        |> Task.andThen
                (\secureContext ->
                    Crypto.importRsaOaepPublicKeyFromJwk
                        secureContext
                        json
                        { hash = Crypto.Sha256
                        }
                        Crypto.CanBeExtracted
                )


{-|-}
importRsaOaepPublicKeyFromSpkiWithArbitraryBytes bytes =
    getSecureContext
        |> Task.mapError (\_ -> Crypto.ImportRsaKeyError)
        |> Task.andThen
                (\secureContext ->
                    Crypto.importRsaOaepPublicKeyFromSpki
                        secureContext
                        bytes
                        { hash = Crypto.Sha256
                        }
                        Crypto.CanBeExtracted
                )


{-|-}
importKey errorMap exportFunc importFunc =
    exportFunc
        |> Task.mapError (\_ -> errorMap)
        |> Task.andThen 
            (\data ->
                importFunc data
                    |> Task.map
                        (\importedKey ->
                            { key = data.key
                            , secureContext = data.secureContext
                            , exportedKey = data.exportedKey
                            , importedKey = importedKey
                            }
                        )
            )


-- AES algorithm
-- 
-- AesCtrKey
-- exportAesCtrKeyAsRaw
-- importAesCtrKeyFromRaw
-- exportAesCtrKeyAsJwk
-- importAesCtrKeyFromJwk
-- 
-- AesCbcKey
-- exportAesCbcKeyAsRaw
-- importAesCbcKeyFromRaw
-- exportAesCbcKeyAsJwk
-- importAesCbcKeyFromJwk
-- 
-- AesGcmKey
-- exportAesGcmKeyAsRaw
-- importAesGcmKeyFromRaw
-- exportAesGcmKeyAsJwk
-- importAesGcmKeyFromJwk
-- 
-- 
-- ECD algorithm
-- 
-- EcdsaKeyPrivateKey
-- exportEcdsaPrivateKeyAsPkcs8
-- importEcdsaPrivateKeyFromPkcs8
-- exportEcdsaPrivateKeyAsJwt
-- importEcdsaPrivateKeyFromJwt
-- 
-- EcdsaKeyPublicKey
-- exportEcdsaPublicKeyAsRaw
-- importEcdsaPublicKeyFromRaw
-- exportEcdsaPublicKeyAsSpki
-- importEcdsaPublicKeyFromSpki
-- exportEcdsaPublicKeyAsJwt
-- importEcdsaPublicKeyFromJwt
-- 
-- EcdhKeyPrivateKey
-- exportEcdhPrivateKeyAsPkcs8
-- importEcdhPrivateKeyFromPkcs8
-- exportEcdhPrivateKeyAsJwt
-- importEcdhPrivateKeyFromJwt
-- 
-- EcdhKeyPublicKey
-- exportEcdhPublicKeyAsRaw
-- importEcdhPublicKeyFromRaw
-- exportEcdhPublicKeyAsSpki
-- importEcdhPublicKeyFromSpki
-- exportEcdhPublicKeyAsJwt
-- importEcdhPublicKeyFromJwt
-- 
-- 
-- HMAC algorithm
-- 
-- HmacKey
-- exportHmacKeyAsRaw
-- importHmacKeyFromRaw
-- exportHmacKeyAsJwk
-- importHmacKeyFromJwk
-- 
-- 
-- Utilities


{-|-}
testHelper : (String -> msg) -> String -> String -> Result a b -> msg
testHelper func success failure result =
    result
        |> Result.map (\_ -> func success)
        |> Result.withDefault (func failure)
